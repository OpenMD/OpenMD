/** @file icosahedralBuilderCmd.hpp
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef ICOSAHEDRALBUILDERCMD_H
#define ICOSAHEDRALBUILDERCMD_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "icosahedralBuilder"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "icosahedralBuilder"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION ""
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * output_arg;	/**< @brief Output file name.  */
  char * output_orig;	/**< @brief Output file name original value given at command line.  */
  const char *output_help; /**< @brief Output file name help description.  */
  int shells_arg;	/**< @brief Nanoparticle shells.  */
  char * shells_orig;	/**< @brief Nanoparticle shells original value given at command line.  */
  const char *shells_help; /**< @brief Nanoparticle shells help description.  */
  double latticeConstant_arg;	/**< @brief Lattice spacing in Angstroms for cubic lattice..  */
  char * latticeConstant_orig;	/**< @brief Lattice spacing in Angstroms for cubic lattice. original value given at command line.  */
  const char *latticeConstant_help; /**< @brief Lattice spacing in Angstroms for cubic lattice. help description.  */
  char * lattice_arg;	/**< @brief Lattice Type.  */
  char * lattice_orig;	/**< @brief Lattice Type original value given at command line.  */
  const char *lattice_help; /**< @brief Lattice Type help description.  */
  int columnAtoms_arg;	/**< @brief Number of atoms along central column (Decahedron only).  */
  char * columnAtoms_orig;	/**< @brief Number of atoms along central column (Decahedron only) original value given at command line.  */
  const char *columnAtoms_help; /**< @brief Number of atoms along central column (Decahedron only) help description.  */
  int twinAtoms_arg;	/**< @brief Number of atoms along twin boundary (Decahedron only).  */
  char * twinAtoms_orig;	/**< @brief Number of atoms along twin boundary (Decahedron only) original value given at command line.  */
  const char *twinAtoms_help; /**< @brief Number of atoms along twin boundary (Decahedron only) help description.  */
  int truncatedPlanes_arg;	/**< @brief Number of truncated planes (Curling-stone Decahedra and Truncated Cubes only).  */
  char * truncatedPlanes_orig;	/**< @brief Number of truncated planes (Curling-stone Decahedra and Truncated Cubes only) original value given at command line.  */
  const char *truncatedPlanes_help; /**< @brief Number of truncated planes (Curling-stone Decahedra and Truncated Cubes only) help description.  */
  int unitCells_arg;	/**< @brief Number of unit cell (Cuboctahedron and Truncated Cube only).  */
  char * unitCells_orig;	/**< @brief Number of unit cell (Cuboctahedron and Truncated Cube only) original value given at command line.  */
  const char *unitCells_help; /**< @brief Number of unit cell (Cuboctahedron and Truncated Cube only) help description.  */
  const char *ico_help; /**< @brief Create an Icosahedral cluster help description.  */
  const char *deca_help; /**< @brief Create a regualar Decahedral cluster help description.  */
  const char *ino_help; /**< @brief Create an Ino Decahedral cluster help description.  */
  const char *marks_help; /**< @brief Create a Marks Decahedral cluster help description.  */
  const char *stone_help; /**< @brief Create a Curling-stone Decahedral cluster help description.  */
  const char *cuboctahedron_help; /**< @brief Create a regular Cuboctahedron (requires lattice) help description.  */
  const char *truncatedCube_help; /**< @brief Create a Truncated Cube (requires lattice) help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int shells_given ;	/**< @brief Whether shells was given.  */
  unsigned int latticeConstant_given ;	/**< @brief Whether latticeConstant was given.  */
  unsigned int lattice_given ;	/**< @brief Whether lattice was given.  */
  unsigned int columnAtoms_given ;	/**< @brief Whether columnAtoms was given.  */
  unsigned int twinAtoms_given ;	/**< @brief Whether twinAtoms was given.  */
  unsigned int truncatedPlanes_given ;	/**< @brief Whether truncatedPlanes was given.  */
  unsigned int unitCells_given ;	/**< @brief Whether unitCells was given.  */
  unsigned int ico_given ;	/**< @brief Whether ico was given.  */
  unsigned int deca_given ;	/**< @brief Whether deca was given.  */
  unsigned int ino_given ;	/**< @brief Whether ino was given.  */
  unsigned int marks_given ;	/**< @brief Whether marks was given.  */
  unsigned int stone_given ;	/**< @brief Whether stone was given.  */
  unsigned int cuboctahedron_given ;	/**< @brief Whether cuboctahedron was given.  */
  unsigned int truncatedCube_given ;	/**< @brief Whether truncatedCube was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
  int clusterShape_group_counter; /**< @brief Counter for group clusterShape */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_lattice_values[];  /**< @brief Possible values for lattice. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* ICOSAHEDRALBUILDERCMD_H */
