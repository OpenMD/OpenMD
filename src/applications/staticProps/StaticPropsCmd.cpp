/*
  File autogenerated by gengetopt version 2.23
  generated with the following command:
  gengetopt --no-handle-error --include-getopt --show-required --unamed-opts --file-name=StaticPropsCmd --c-extension=cpp --header-extension=hpp

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef FIX_UNUSED
#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
#endif


#include "StaticPropsCmd.hpp"

const char *gengetopt_args_info_purpose = "Computes properties which are averaged over some or all of the\nconfigurations that are contained within a dump file. The most common\nexample of a static property that can be computed is the pair\ndistribution function between atoms of type A and other atoms of type\nB, gAB(r).\n\nExample:\n   StaticProps -i tp4.dump --gofr --sele1=\"select O*\" --sele2=\"select O*\"\n\nThis command computes the oxygen-oxygen pair distribution function,\ngOO(r), from a file named tp4.dump";

const char *gengetopt_args_info_usage = "Usage: StaticProps [OPTION]... [FILE]...";

const char *gengetopt_args_info_versiontext = "";

const char *gengetopt_args_info_description = "";

const char *gengetopt_args_info_help[] = {
  "  -h, --help                    Print help and exit",
  "  -V, --version                 Print version and exit",
  "  -i, --input=filename          input dump file (mandatory)",
  "  -o, --output=filename         output file name",
  "  -n, --step=INT                process every n frame  (default=`1')",
  "  -b, --nbins=INT               number of bins (general purpose)\n                                  (default=`100')",
  "  -x, --nbins_x=INT             number of bins in x axis  (default=`100')",
  "  -y, --nbins_y=INT             number of bins in y axis  (default=`100')",
  "      --nbins_z=INT             number of bins in z axis  (default=`100')",
  "  -r, --nrbins=INT              number of radial bins (usually duplicates\n                                  functionality of nbins)  (default=`100')",
  "  -a, --nanglebins=INT          number of bins for cos(angle)  (default=`50')",
  "  -c, --rcut=DOUBLE             cutoff radius (rcut)",
  "      --OOcut=DOUBLE            Oxygen-Oxygen cutoff radius (angstroms)\n                                  (default=`3.5')",
  "      --thetacut=DOUBLE         HOO cutoff angle (degrees)  (default=`30')",
  "      --OHcut=DOUBLE            Oxygen-Hydrogen cutoff radius (angstroms)\n                                  (default=`2.45')",
  "      --dz=DOUBLE               slab width (dz)",
  "      --length=DOUBLE           maximum length (Defaults to 1/2 smallest length\n                                  of first frame)",
  "      --zlength=DOUBLE          maximum length (Defaults to 1/2 smallest length\n                                  of first frame)",
  "  -z, --zoffset=DOUBLE          Where to set the zero for the slab_density\n                                  calculation  (default=`0')",
  "      --sele1=selection script  select the first stuntdouble set",
  "      --sele2=selection script  select the second stuntdouble set",
  "      --sele3=selection script  select the third stuntdouble set",
  "      --refsele=selection script\n                                select reference (use and only use with --gxyz)",
  "      --comsele=selection script\n                                select stunt doubles for center-of-mass\n                                  reference point",
  "      --seleoffset=INT          global index offset for a second object (used\n                                  to define a vector between sites in molecule)",
  "      --seleoffset2=INT         global index offset for a third object (used to\n                                  define a vector between sites in molecule)",
  "      --molname=STRING          molecule name",
  "      --begin=INT               begin internal index",
  "      --end=INT                 end internal index",
  "      --radius=DOUBLE           nanoparticle radius",
  "  -v, --voxelSize=DOUBLE        voxel size (angstroms)",
  "      --gaussWidth=DOUBLE       Gaussian width (angstroms)",
  "      --privilegedAxis=ENUM     which axis is special for spatial analysis\n                                  (default = z axis)  (possible values=\"x\",\n                                  \"y\", \"z\" default=`z')",
  "      --privilegedAxis2=ENUM    which axis is special for spatial analysis\n                                  (default = x axis)  (possible values=\"x\",\n                                  \"y\", \"z\" default=`x')",
  "      --momentum=ENUM           Type of momentum whose distribtution is\n                                  required (default = Liner Momentum)\n                                  (possible values=\"P\", \"J\" default=`P')",
  "      --component=ENUM          component of momentum for the momemtum\n                                  distribution (default = z axis)  (possible\n                                  values=\"x\", \"y\", \"z\" default=`z')",
  "      --dipoleX=DOUBLE          X-component of the dipole with respect to body\n                                  frame",
  "      --dipoleY=DOUBLE          Y-component of the dipole with respect to body\n                                  frame",
  "      --dipoleZ=DOUBLE          Z-component of the dipole with respect to body\n                                  frame",
  "      --v_radius=DOUBLE         VanderWaals radiius for fictious atoms used in\n                                  model eg. M site in TIP4P-FQ water model",
  "      --gen_xyz                 generats xyz file  (default=off)",
  "      --atom_name=selection script\n                                name of atom for with average charge to be\n                                  generated",
  "\n Group: staticProps\n   an option of this group is required",
  "      --bo                      bond order parameter (--rcut must be specified)",
  "      --ior                     icosahedral bond order parameter as a function\n                                  of radius (--rcut must be specified)",
  "      --for                     FCC bond order parameter as a function of\n                                  radius (--rcut must be specified)",
  "      --bad                     N(theta) bond angle density within (--rcut must\n                                  be specified)",
  "      --count                   count of molecules matching selection criteria\n                                  (and associated statistics)",
  "  -g, --gofr                    g(r)",
  "      --gofz                    g(z)",
  "      --r_theta                 g(r, cos(theta))",
  "      --r_omega                 g(r, cos(omega))",
  "      --r_z                     g(r, z)",
  "      --theta_omega             g(cos(theta), cos(omega))",
  "      --r_theta_omega           g(r, cos(theta), cos(omega))",
  "      --gxyz                    g(x, y, z)",
  "      --twodgofr                2D g(r) (Slab width --dz must be specified)",
  "  -p, --p2                      p2 order parameter (--sele1 must be specified,\n                                  --sele2 is optional)",
  "      --rp2                     rp2 order parameter (--sele1 and --sele2 must\n                                  be specified)",
  "  -s, --scd                     scd order parameter (either --sele1, --sele2,\n                                  --sele3 are specified or --molname, --begin,\n                                  --end are specified)",
  "  -d, --density                 density plot",
  "      --slab_density            slab density, rho(z)",
  "      --pipe_density            pipe density, rho(axis1, axis2)",
  "      --p_angle                 p(cos(theta)) (--sele1 must be specified,\n                                  --sele2 is optional)",
  "      --hxy                     hxy",
  "      --rho_r                   rho(R)",
  "      --angle_r                 angle of R",
  "      --hullvol                 hull volume of nanoparticle",
  "      --rodlength               length of nanorod",
  "  -Q, --tet_param               tetrahedrality order parameter (Qk)",
  "      --tet_param_z             spatially-resolved tetrahedrality order\n                                  parameter Qk(z)",
  "      --tet_param_dens          computes density of the tetrahedrality order\n                                  parameter Qk",
  "      --tet_param_xyz           volume-resolved tetrahedrality order parameter\n                                  Qk(x,y,z).  (voxelSize, rcut, and gaussWidth\n                                  must be specified)",
  "      --rnemdz                  slab-resolved RNEMD statistics (temperature,\n                                  density, velocity)",
  "      --rnemdr                  shell-resolved RNEMD statistics (temperature,\n                                  density, angular velocity)",
  "      --rnemdrt                 shell and angle-resolved RNEMD statistics\n                                  (temperature, density, angular velocity)",
  "      --nitrile                 electrostatic potential to frequency map based\n                                  on the Cho nitrile fits",
  "  -m, --multipole               average multipole moments contained within\n                                  cutoff spheres as a function of radius",
  "      --surfDiffusion           X, Y, and R (surface diffusion if Z exposed and\n                                  bulk immobile) diffusion",
  "      --cn                      Coordination Number Distribution",
  "      --scn                     Secondary Coordination Number Distribution",
  "      --gcn                     Generalized Coordination Number Distribution",
  "      --hbond                   Hydrogen Bonding statistics using geometric\n                                  criteria (rcut and thetacut must be\n                                  specified)",
  "      --potDiff                 potential energy difference when charge on\n                                  selection is set to zero",
  "      --tet_hb                  hydrogen bond statistics binned by\n                                  tetrahedrality of donor and acceptor\n                                  molecules",
  "  -k, --kirkwood                distance-dependent Kirkwood factor",
  "      --kirkwoodQ               distance-dependent Kirkwood factor for\n                                  quadrupoles",
  "      --densityfield            computes an average density field",
  "      --velocityfield           computes an average velocity field",
  "      --velocityZ               computes an average two-dimensional velocity\n                                  map",
  "  -D, --eam_density             computes an average eam density profile of the\n                                  selected atom",
  "  -q, --net_charge              computes an average charge profile of the\n                                  selected atom",
  "  -J, --current_density         computes the current density for the selected\n                                  atom",
  "      --chargez                 computes the charge distribution along selected\n                                  axis and selected atom",
  "      --charge_density_z        computes the continuous charge distribution\n                                  along selected axis and selected atom",
  "      --countz                  computes the number of selected atoms  along\n                                  selected axis",
  "  -M, --momentum_distribution   computes the momentum distribution for the\n                                  selected atom",
  "  -S, --dipole_orientation      spatially-resolved dipole order parameter S(z),\n                                  S = (3 Cos^2\\theta - 1)/2",
  "      --order_prob              probability of order parameter for given\n                                  selection",
    0
};

typedef enum {ARG_NO
  , ARG_FLAG
  , ARG_STRING
  , ARG_INT
  , ARG_DOUBLE
  , ARG_ENUM
} cmdline_parser_arg_type;

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
cmdline_parser_internal (int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error);

static int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error);

const char *cmdline_parser_privilegedAxis_values[] = {"x", "y", "z", 0}; /*< Possible values for privilegedAxis. */
const char *cmdline_parser_privilegedAxis2_values[] = {"x", "y", "z", 0}; /*< Possible values for privilegedAxis2. */
const char *cmdline_parser_momentum_values[] = {"P", "J", 0}; /*< Possible values for momentum. */
const char *cmdline_parser_component_values[] = {"x", "y", "z", 0}; /*< Possible values for component. */

static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->input_given = 0 ;
  args_info->output_given = 0 ;
  args_info->step_given = 0 ;
  args_info->nbins_given = 0 ;
  args_info->nbins_x_given = 0 ;
  args_info->nbins_y_given = 0 ;
  args_info->nbins_z_given = 0 ;
  args_info->nrbins_given = 0 ;
  args_info->nanglebins_given = 0 ;
  args_info->rcut_given = 0 ;
  args_info->OOcut_given = 0 ;
  args_info->thetacut_given = 0 ;
  args_info->OHcut_given = 0 ;
  args_info->dz_given = 0 ;
  args_info->length_given = 0 ;
  args_info->zlength_given = 0 ;
  args_info->zoffset_given = 0 ;
  args_info->sele1_given = 0 ;
  args_info->sele2_given = 0 ;
  args_info->sele3_given = 0 ;
  args_info->refsele_given = 0 ;
  args_info->comsele_given = 0 ;
  args_info->seleoffset_given = 0 ;
  args_info->seleoffset2_given = 0 ;
  args_info->molname_given = 0 ;
  args_info->begin_given = 0 ;
  args_info->end_given = 0 ;
  args_info->radius_given = 0 ;
  args_info->voxelSize_given = 0 ;
  args_info->gaussWidth_given = 0 ;
  args_info->privilegedAxis_given = 0 ;
  args_info->privilegedAxis2_given = 0 ;
  args_info->momentum_given = 0 ;
  args_info->component_given = 0 ;
  args_info->dipoleX_given = 0 ;
  args_info->dipoleY_given = 0 ;
  args_info->dipoleZ_given = 0 ;
  args_info->v_radius_given = 0 ;
  args_info->gen_xyz_given = 0 ;
  args_info->atom_name_given = 0 ;
  args_info->bo_given = 0 ;
  args_info->ior_given = 0 ;
  args_info->for_given = 0 ;
  args_info->bad_given = 0 ;
  args_info->count_given = 0 ;
  args_info->gofr_given = 0 ;
  args_info->gofz_given = 0 ;
  args_info->r_theta_given = 0 ;
  args_info->r_omega_given = 0 ;
  args_info->r_z_given = 0 ;
  args_info->theta_omega_given = 0 ;
  args_info->r_theta_omega_given = 0 ;
  args_info->gxyz_given = 0 ;
  args_info->twodgofr_given = 0 ;
  args_info->p2_given = 0 ;
  args_info->rp2_given = 0 ;
  args_info->scd_given = 0 ;
  args_info->density_given = 0 ;
  args_info->slab_density_given = 0 ;
  args_info->pipe_density_given = 0 ;
  args_info->p_angle_given = 0 ;
  args_info->hxy_given = 0 ;
  args_info->rho_r_given = 0 ;
  args_info->angle_r_given = 0 ;
  args_info->hullvol_given = 0 ;
  args_info->rodlength_given = 0 ;
  args_info->tet_param_given = 0 ;
  args_info->tet_param_z_given = 0 ;
  args_info->tet_param_dens_given = 0 ;
  args_info->tet_param_xyz_given = 0 ;
  args_info->rnemdz_given = 0 ;
  args_info->rnemdr_given = 0 ;
  args_info->rnemdrt_given = 0 ;
  args_info->nitrile_given = 0 ;
  args_info->multipole_given = 0 ;
  args_info->surfDiffusion_given = 0 ;
  args_info->cn_given = 0 ;
  args_info->scn_given = 0 ;
  args_info->gcn_given = 0 ;
  args_info->hbond_given = 0 ;
  args_info->potDiff_given = 0 ;
  args_info->tet_hb_given = 0 ;
  args_info->kirkwood_given = 0 ;
  args_info->kirkwoodQ_given = 0 ;
  args_info->densityfield_given = 0 ;
  args_info->velocityfield_given = 0 ;
  args_info->velocityZ_given = 0 ;
  args_info->eam_density_given = 0 ;
  args_info->net_charge_given = 0 ;
  args_info->current_density_given = 0 ;
  args_info->chargez_given = 0 ;
  args_info->charge_density_z_given = 0 ;
  args_info->countz_given = 0 ;
  args_info->momentum_distribution_given = 0 ;
  args_info->dipole_orientation_given = 0 ;
  args_info->order_prob_given = 0 ;
  args_info->staticProps_group_counter = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  FIX_UNUSED (args_info);
  args_info->input_arg = NULL;
  args_info->input_orig = NULL;
  args_info->output_arg = NULL;
  args_info->output_orig = NULL;
  args_info->step_arg = 1;
  args_info->step_orig = NULL;
  args_info->nbins_arg = 100;
  args_info->nbins_orig = NULL;
  args_info->nbins_x_arg = 100;
  args_info->nbins_x_orig = NULL;
  args_info->nbins_y_arg = 100;
  args_info->nbins_y_orig = NULL;
  args_info->nbins_z_arg = 100;
  args_info->nbins_z_orig = NULL;
  args_info->nrbins_arg = 100;
  args_info->nrbins_orig = NULL;
  args_info->nanglebins_arg = 50;
  args_info->nanglebins_orig = NULL;
  args_info->rcut_orig = NULL;
  args_info->OOcut_arg = 3.5;
  args_info->OOcut_orig = NULL;
  args_info->thetacut_arg = 30;
  args_info->thetacut_orig = NULL;
  args_info->OHcut_arg = 2.45;
  args_info->OHcut_orig = NULL;
  args_info->dz_orig = NULL;
  args_info->length_orig = NULL;
  args_info->zlength_orig = NULL;
  args_info->zoffset_arg = 0;
  args_info->zoffset_orig = NULL;
  args_info->sele1_arg = NULL;
  args_info->sele1_orig = NULL;
  args_info->sele2_arg = NULL;
  args_info->sele2_orig = NULL;
  args_info->sele3_arg = NULL;
  args_info->sele3_orig = NULL;
  args_info->refsele_arg = NULL;
  args_info->refsele_orig = NULL;
  args_info->comsele_arg = NULL;
  args_info->comsele_orig = NULL;
  args_info->seleoffset_orig = NULL;
  args_info->seleoffset2_orig = NULL;
  args_info->molname_arg = NULL;
  args_info->molname_orig = NULL;
  args_info->begin_orig = NULL;
  args_info->end_orig = NULL;
  args_info->radius_orig = NULL;
  args_info->voxelSize_orig = NULL;
  args_info->gaussWidth_orig = NULL;
  args_info->privilegedAxis_arg = privilegedAxis_arg_z;
  args_info->privilegedAxis_orig = NULL;
  args_info->privilegedAxis2_arg = privilegedAxis2_arg_x;
  args_info->privilegedAxis2_orig = NULL;
  args_info->momentum_arg = momentum_arg_P;
  args_info->momentum_orig = NULL;
  args_info->component_arg = component_arg_z;
  args_info->component_orig = NULL;
  args_info->dipoleX_orig = NULL;
  args_info->dipoleY_orig = NULL;
  args_info->dipoleZ_orig = NULL;
  args_info->v_radius_orig = NULL;
  args_info->gen_xyz_flag = 0;
  args_info->atom_name_arg = NULL;
  args_info->atom_name_orig = NULL;
  
}

static
void init_args_info(struct gengetopt_args_info *args_info)
{


  args_info->help_help = gengetopt_args_info_help[0] ;
  args_info->version_help = gengetopt_args_info_help[1] ;
  args_info->input_help = gengetopt_args_info_help[2] ;
  args_info->output_help = gengetopt_args_info_help[3] ;
  args_info->step_help = gengetopt_args_info_help[4] ;
  args_info->nbins_help = gengetopt_args_info_help[5] ;
  args_info->nbins_x_help = gengetopt_args_info_help[6] ;
  args_info->nbins_y_help = gengetopt_args_info_help[7] ;
  args_info->nbins_z_help = gengetopt_args_info_help[8] ;
  args_info->nrbins_help = gengetopt_args_info_help[9] ;
  args_info->nanglebins_help = gengetopt_args_info_help[10] ;
  args_info->rcut_help = gengetopt_args_info_help[11] ;
  args_info->OOcut_help = gengetopt_args_info_help[12] ;
  args_info->thetacut_help = gengetopt_args_info_help[13] ;
  args_info->OHcut_help = gengetopt_args_info_help[14] ;
  args_info->dz_help = gengetopt_args_info_help[15] ;
  args_info->length_help = gengetopt_args_info_help[16] ;
  args_info->zlength_help = gengetopt_args_info_help[17] ;
  args_info->zoffset_help = gengetopt_args_info_help[18] ;
  args_info->sele1_help = gengetopt_args_info_help[19] ;
  args_info->sele2_help = gengetopt_args_info_help[20] ;
  args_info->sele3_help = gengetopt_args_info_help[21] ;
  args_info->refsele_help = gengetopt_args_info_help[22] ;
  args_info->comsele_help = gengetopt_args_info_help[23] ;
  args_info->seleoffset_help = gengetopt_args_info_help[24] ;
  args_info->seleoffset2_help = gengetopt_args_info_help[25] ;
  args_info->molname_help = gengetopt_args_info_help[26] ;
  args_info->begin_help = gengetopt_args_info_help[27] ;
  args_info->end_help = gengetopt_args_info_help[28] ;
  args_info->radius_help = gengetopt_args_info_help[29] ;
  args_info->voxelSize_help = gengetopt_args_info_help[30] ;
  args_info->gaussWidth_help = gengetopt_args_info_help[31] ;
  args_info->privilegedAxis_help = gengetopt_args_info_help[32] ;
  args_info->privilegedAxis2_help = gengetopt_args_info_help[33] ;
  args_info->momentum_help = gengetopt_args_info_help[34] ;
  args_info->component_help = gengetopt_args_info_help[35] ;
  args_info->dipoleX_help = gengetopt_args_info_help[36] ;
  args_info->dipoleY_help = gengetopt_args_info_help[37] ;
  args_info->dipoleZ_help = gengetopt_args_info_help[38] ;
  args_info->v_radius_help = gengetopt_args_info_help[39] ;
  args_info->gen_xyz_help = gengetopt_args_info_help[40] ;
  args_info->atom_name_help = gengetopt_args_info_help[41] ;
  args_info->bo_help = gengetopt_args_info_help[43] ;
  args_info->ior_help = gengetopt_args_info_help[44] ;
  args_info->for_help = gengetopt_args_info_help[45] ;
  args_info->bad_help = gengetopt_args_info_help[46] ;
  args_info->count_help = gengetopt_args_info_help[47] ;
  args_info->gofr_help = gengetopt_args_info_help[48] ;
  args_info->gofz_help = gengetopt_args_info_help[49] ;
  args_info->r_theta_help = gengetopt_args_info_help[50] ;
  args_info->r_omega_help = gengetopt_args_info_help[51] ;
  args_info->r_z_help = gengetopt_args_info_help[52] ;
  args_info->theta_omega_help = gengetopt_args_info_help[53] ;
  args_info->r_theta_omega_help = gengetopt_args_info_help[54] ;
  args_info->gxyz_help = gengetopt_args_info_help[55] ;
  args_info->twodgofr_help = gengetopt_args_info_help[56] ;
  args_info->p2_help = gengetopt_args_info_help[57] ;
  args_info->rp2_help = gengetopt_args_info_help[58] ;
  args_info->scd_help = gengetopt_args_info_help[59] ;
  args_info->density_help = gengetopt_args_info_help[60] ;
  args_info->slab_density_help = gengetopt_args_info_help[61] ;
  args_info->pipe_density_help = gengetopt_args_info_help[62] ;
  args_info->p_angle_help = gengetopt_args_info_help[63] ;
  args_info->hxy_help = gengetopt_args_info_help[64] ;
  args_info->rho_r_help = gengetopt_args_info_help[65] ;
  args_info->angle_r_help = gengetopt_args_info_help[66] ;
  args_info->hullvol_help = gengetopt_args_info_help[67] ;
  args_info->rodlength_help = gengetopt_args_info_help[68] ;
  args_info->tet_param_help = gengetopt_args_info_help[69] ;
  args_info->tet_param_z_help = gengetopt_args_info_help[70] ;
  args_info->tet_param_dens_help = gengetopt_args_info_help[71] ;
  args_info->tet_param_xyz_help = gengetopt_args_info_help[72] ;
  args_info->rnemdz_help = gengetopt_args_info_help[73] ;
  args_info->rnemdr_help = gengetopt_args_info_help[74] ;
  args_info->rnemdrt_help = gengetopt_args_info_help[75] ;
  args_info->nitrile_help = gengetopt_args_info_help[76] ;
  args_info->multipole_help = gengetopt_args_info_help[77] ;
  args_info->surfDiffusion_help = gengetopt_args_info_help[78] ;
  args_info->cn_help = gengetopt_args_info_help[79] ;
  args_info->scn_help = gengetopt_args_info_help[80] ;
  args_info->gcn_help = gengetopt_args_info_help[81] ;
  args_info->hbond_help = gengetopt_args_info_help[82] ;
  args_info->potDiff_help = gengetopt_args_info_help[83] ;
  args_info->tet_hb_help = gengetopt_args_info_help[84] ;
  args_info->kirkwood_help = gengetopt_args_info_help[85] ;
  args_info->kirkwoodQ_help = gengetopt_args_info_help[86] ;
  args_info->densityfield_help = gengetopt_args_info_help[87] ;
  args_info->velocityfield_help = gengetopt_args_info_help[88] ;
  args_info->velocityZ_help = gengetopt_args_info_help[89] ;
  args_info->eam_density_help = gengetopt_args_info_help[90] ;
  args_info->net_charge_help = gengetopt_args_info_help[91] ;
  args_info->current_density_help = gengetopt_args_info_help[92] ;
  args_info->chargez_help = gengetopt_args_info_help[93] ;
  args_info->charge_density_z_help = gengetopt_args_info_help[94] ;
  args_info->countz_help = gengetopt_args_info_help[95] ;
  args_info->momentum_distribution_help = gengetopt_args_info_help[96] ;
  args_info->dipole_orientation_help = gengetopt_args_info_help[97] ;
  args_info->order_prob_help = gengetopt_args_info_help[98] ;
  
}

void
cmdline_parser_print_version (void)
{
  printf ("%s %s\n",
     (strlen(CMDLINE_PARSER_PACKAGE_NAME) ? CMDLINE_PARSER_PACKAGE_NAME : CMDLINE_PARSER_PACKAGE),
     CMDLINE_PARSER_VERSION);

  if (strlen(gengetopt_args_info_versiontext) > 0)
    printf("\n%s\n", gengetopt_args_info_versiontext);
}

static void print_help_common(void)
{
	size_t len_purpose = strlen(gengetopt_args_info_purpose);
	size_t len_usage = strlen(gengetopt_args_info_usage);

	if (len_usage > 0) {
		printf("%s\n", gengetopt_args_info_usage);
	}
	if (len_purpose > 0) {
		printf("%s\n", gengetopt_args_info_purpose);
	}

	if (len_usage || len_purpose) {
		printf("\n");
	}

	if (strlen(gengetopt_args_info_description) > 0) {
		printf("%s\n\n", gengetopt_args_info_description);
	}
}

void
cmdline_parser_print_help (void)
{
  int i = 0;
  print_help_common();
  while (gengetopt_args_info_help[i])
    printf("%s\n", gengetopt_args_info_help[i++]);
}

void
cmdline_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);

  args_info->inputs = 0;
  args_info->inputs_num = 0;
}

void
cmdline_parser_params_init(struct cmdline_parser_params *params)
{
  if (params)
    { 
      params->override = 0;
      params->initialize = 1;
      params->check_required = 1;
      params->check_ambiguity = 0;
      params->print_errors = 1;
    }
}

struct cmdline_parser_params *
cmdline_parser_params_create(void)
{
  struct cmdline_parser_params *params = 
    (struct cmdline_parser_params *)malloc(sizeof(struct cmdline_parser_params));
  cmdline_parser_params_init(params);  
  return params;
}

static void
free_string_field (char **s)
{
  if (*s)
    {
      free (*s);
      *s = 0;
    }
}


static void
cmdline_parser_release (struct gengetopt_args_info *args_info)
{
  unsigned int i;
  free_string_field (&(args_info->input_arg));
  free_string_field (&(args_info->input_orig));
  free_string_field (&(args_info->output_arg));
  free_string_field (&(args_info->output_orig));
  free_string_field (&(args_info->step_orig));
  free_string_field (&(args_info->nbins_orig));
  free_string_field (&(args_info->nbins_x_orig));
  free_string_field (&(args_info->nbins_y_orig));
  free_string_field (&(args_info->nbins_z_orig));
  free_string_field (&(args_info->nrbins_orig));
  free_string_field (&(args_info->nanglebins_orig));
  free_string_field (&(args_info->rcut_orig));
  free_string_field (&(args_info->OOcut_orig));
  free_string_field (&(args_info->thetacut_orig));
  free_string_field (&(args_info->OHcut_orig));
  free_string_field (&(args_info->dz_orig));
  free_string_field (&(args_info->length_orig));
  free_string_field (&(args_info->zlength_orig));
  free_string_field (&(args_info->zoffset_orig));
  free_string_field (&(args_info->sele1_arg));
  free_string_field (&(args_info->sele1_orig));
  free_string_field (&(args_info->sele2_arg));
  free_string_field (&(args_info->sele2_orig));
  free_string_field (&(args_info->sele3_arg));
  free_string_field (&(args_info->sele3_orig));
  free_string_field (&(args_info->refsele_arg));
  free_string_field (&(args_info->refsele_orig));
  free_string_field (&(args_info->comsele_arg));
  free_string_field (&(args_info->comsele_orig));
  free_string_field (&(args_info->seleoffset_orig));
  free_string_field (&(args_info->seleoffset2_orig));
  free_string_field (&(args_info->molname_arg));
  free_string_field (&(args_info->molname_orig));
  free_string_field (&(args_info->begin_orig));
  free_string_field (&(args_info->end_orig));
  free_string_field (&(args_info->radius_orig));
  free_string_field (&(args_info->voxelSize_orig));
  free_string_field (&(args_info->gaussWidth_orig));
  free_string_field (&(args_info->privilegedAxis_orig));
  free_string_field (&(args_info->privilegedAxis2_orig));
  free_string_field (&(args_info->momentum_orig));
  free_string_field (&(args_info->component_orig));
  free_string_field (&(args_info->dipoleX_orig));
  free_string_field (&(args_info->dipoleY_orig));
  free_string_field (&(args_info->dipoleZ_orig));
  free_string_field (&(args_info->v_radius_orig));
  free_string_field (&(args_info->atom_name_arg));
  free_string_field (&(args_info->atom_name_orig));
  
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);

  if (args_info->inputs_num)
    free (args_info->inputs);

  clear_given (args_info);
}

/**
 * @param val the value to check
 * @param values the possible values
 * @return the index of the matched value:
 * -1 if no value matched,
 * -2 if more than one value has matched
 */
static int
check_possible_values(const char *val, const char *values[])
{
  int i, found, last;
  size_t len;

  if (!val)   /* otherwise strlen() crashes below */
    return -1; /* -1 means no argument for the option */

  found = last = 0;

  for (i = 0, len = strlen(val); values[i]; ++i)
    {
      if (strncmp(val, values[i], len) == 0)
        {
          ++found;
          last = i;
          if (strlen(values[i]) == len)
            return i; /* exact macth no need to check more */
        }
    }

  if (found == 1) /* one match: OK */
    return last;

  return (found ? -2 : -1); /* return many values or none matched */
}


static void
write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
{
  int found = -1;
  if (arg) {
    if (values) {
      found = check_possible_values(arg, values);      
    }
    if (found >= 0)
      fprintf(outfile, "%s=\"%s\" # %s\n", opt, arg, values[found]);
    else
      fprintf(outfile, "%s=\"%s\"\n", opt, arg);
  } else {
    fprintf(outfile, "%s\n", opt);
  }
}


int
cmdline_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info)
{
  int i = 0;

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot dump options to stream\n", CMDLINE_PARSER_PACKAGE);
      return EXIT_FAILURE;
    }

  if (args_info->help_given)
    write_into_file(outfile, "help", 0, 0 );
  if (args_info->version_given)
    write_into_file(outfile, "version", 0, 0 );
  if (args_info->input_given)
    write_into_file(outfile, "input", args_info->input_orig, 0);
  if (args_info->output_given)
    write_into_file(outfile, "output", args_info->output_orig, 0);
  if (args_info->step_given)
    write_into_file(outfile, "step", args_info->step_orig, 0);
  if (args_info->nbins_given)
    write_into_file(outfile, "nbins", args_info->nbins_orig, 0);
  if (args_info->nbins_x_given)
    write_into_file(outfile, "nbins_x", args_info->nbins_x_orig, 0);
  if (args_info->nbins_y_given)
    write_into_file(outfile, "nbins_y", args_info->nbins_y_orig, 0);
  if (args_info->nbins_z_given)
    write_into_file(outfile, "nbins_z", args_info->nbins_z_orig, 0);
  if (args_info->nrbins_given)
    write_into_file(outfile, "nrbins", args_info->nrbins_orig, 0);
  if (args_info->nanglebins_given)
    write_into_file(outfile, "nanglebins", args_info->nanglebins_orig, 0);
  if (args_info->rcut_given)
    write_into_file(outfile, "rcut", args_info->rcut_orig, 0);
  if (args_info->OOcut_given)
    write_into_file(outfile, "OOcut", args_info->OOcut_orig, 0);
  if (args_info->thetacut_given)
    write_into_file(outfile, "thetacut", args_info->thetacut_orig, 0);
  if (args_info->OHcut_given)
    write_into_file(outfile, "OHcut", args_info->OHcut_orig, 0);
  if (args_info->dz_given)
    write_into_file(outfile, "dz", args_info->dz_orig, 0);
  if (args_info->length_given)
    write_into_file(outfile, "length", args_info->length_orig, 0);
  if (args_info->zlength_given)
    write_into_file(outfile, "zlength", args_info->zlength_orig, 0);
  if (args_info->zoffset_given)
    write_into_file(outfile, "zoffset", args_info->zoffset_orig, 0);
  if (args_info->sele1_given)
    write_into_file(outfile, "sele1", args_info->sele1_orig, 0);
  if (args_info->sele2_given)
    write_into_file(outfile, "sele2", args_info->sele2_orig, 0);
  if (args_info->sele3_given)
    write_into_file(outfile, "sele3", args_info->sele3_orig, 0);
  if (args_info->refsele_given)
    write_into_file(outfile, "refsele", args_info->refsele_orig, 0);
  if (args_info->comsele_given)
    write_into_file(outfile, "comsele", args_info->comsele_orig, 0);
  if (args_info->seleoffset_given)
    write_into_file(outfile, "seleoffset", args_info->seleoffset_orig, 0);
  if (args_info->seleoffset2_given)
    write_into_file(outfile, "seleoffset2", args_info->seleoffset2_orig, 0);
  if (args_info->molname_given)
    write_into_file(outfile, "molname", args_info->molname_orig, 0);
  if (args_info->begin_given)
    write_into_file(outfile, "begin", args_info->begin_orig, 0);
  if (args_info->end_given)
    write_into_file(outfile, "end", args_info->end_orig, 0);
  if (args_info->radius_given)
    write_into_file(outfile, "radius", args_info->radius_orig, 0);
  if (args_info->voxelSize_given)
    write_into_file(outfile, "voxelSize", args_info->voxelSize_orig, 0);
  if (args_info->gaussWidth_given)
    write_into_file(outfile, "gaussWidth", args_info->gaussWidth_orig, 0);
  if (args_info->privilegedAxis_given)
    write_into_file(outfile, "privilegedAxis", args_info->privilegedAxis_orig, cmdline_parser_privilegedAxis_values);
  if (args_info->privilegedAxis2_given)
    write_into_file(outfile, "privilegedAxis2", args_info->privilegedAxis2_orig, cmdline_parser_privilegedAxis2_values);
  if (args_info->momentum_given)
    write_into_file(outfile, "momentum", args_info->momentum_orig, cmdline_parser_momentum_values);
  if (args_info->component_given)
    write_into_file(outfile, "component", args_info->component_orig, cmdline_parser_component_values);
  if (args_info->dipoleX_given)
    write_into_file(outfile, "dipoleX", args_info->dipoleX_orig, 0);
  if (args_info->dipoleY_given)
    write_into_file(outfile, "dipoleY", args_info->dipoleY_orig, 0);
  if (args_info->dipoleZ_given)
    write_into_file(outfile, "dipoleZ", args_info->dipoleZ_orig, 0);
  if (args_info->v_radius_given)
    write_into_file(outfile, "v_radius", args_info->v_radius_orig, 0);
  if (args_info->gen_xyz_given)
    write_into_file(outfile, "gen_xyz", 0, 0 );
  if (args_info->atom_name_given)
    write_into_file(outfile, "atom_name", args_info->atom_name_orig, 0);
  if (args_info->bo_given)
    write_into_file(outfile, "bo", 0, 0 );
  if (args_info->ior_given)
    write_into_file(outfile, "ior", 0, 0 );
  if (args_info->for_given)
    write_into_file(outfile, "for", 0, 0 );
  if (args_info->bad_given)
    write_into_file(outfile, "bad", 0, 0 );
  if (args_info->count_given)
    write_into_file(outfile, "count", 0, 0 );
  if (args_info->gofr_given)
    write_into_file(outfile, "gofr", 0, 0 );
  if (args_info->gofz_given)
    write_into_file(outfile, "gofz", 0, 0 );
  if (args_info->r_theta_given)
    write_into_file(outfile, "r_theta", 0, 0 );
  if (args_info->r_omega_given)
    write_into_file(outfile, "r_omega", 0, 0 );
  if (args_info->r_z_given)
    write_into_file(outfile, "r_z", 0, 0 );
  if (args_info->theta_omega_given)
    write_into_file(outfile, "theta_omega", 0, 0 );
  if (args_info->r_theta_omega_given)
    write_into_file(outfile, "r_theta_omega", 0, 0 );
  if (args_info->gxyz_given)
    write_into_file(outfile, "gxyz", 0, 0 );
  if (args_info->twodgofr_given)
    write_into_file(outfile, "twodgofr", 0, 0 );
  if (args_info->p2_given)
    write_into_file(outfile, "p2", 0, 0 );
  if (args_info->rp2_given)
    write_into_file(outfile, "rp2", 0, 0 );
  if (args_info->scd_given)
    write_into_file(outfile, "scd", 0, 0 );
  if (args_info->density_given)
    write_into_file(outfile, "density", 0, 0 );
  if (args_info->slab_density_given)
    write_into_file(outfile, "slab_density", 0, 0 );
  if (args_info->pipe_density_given)
    write_into_file(outfile, "pipe_density", 0, 0 );
  if (args_info->p_angle_given)
    write_into_file(outfile, "p_angle", 0, 0 );
  if (args_info->hxy_given)
    write_into_file(outfile, "hxy", 0, 0 );
  if (args_info->rho_r_given)
    write_into_file(outfile, "rho_r", 0, 0 );
  if (args_info->angle_r_given)
    write_into_file(outfile, "angle_r", 0, 0 );
  if (args_info->hullvol_given)
    write_into_file(outfile, "hullvol", 0, 0 );
  if (args_info->rodlength_given)
    write_into_file(outfile, "rodlength", 0, 0 );
  if (args_info->tet_param_given)
    write_into_file(outfile, "tet_param", 0, 0 );
  if (args_info->tet_param_z_given)
    write_into_file(outfile, "tet_param_z", 0, 0 );
  if (args_info->tet_param_dens_given)
    write_into_file(outfile, "tet_param_dens", 0, 0 );
  if (args_info->tet_param_xyz_given)
    write_into_file(outfile, "tet_param_xyz", 0, 0 );
  if (args_info->rnemdz_given)
    write_into_file(outfile, "rnemdz", 0, 0 );
  if (args_info->rnemdr_given)
    write_into_file(outfile, "rnemdr", 0, 0 );
  if (args_info->rnemdrt_given)
    write_into_file(outfile, "rnemdrt", 0, 0 );
  if (args_info->nitrile_given)
    write_into_file(outfile, "nitrile", 0, 0 );
  if (args_info->multipole_given)
    write_into_file(outfile, "multipole", 0, 0 );
  if (args_info->surfDiffusion_given)
    write_into_file(outfile, "surfDiffusion", 0, 0 );
  if (args_info->cn_given)
    write_into_file(outfile, "cn", 0, 0 );
  if (args_info->scn_given)
    write_into_file(outfile, "scn", 0, 0 );
  if (args_info->gcn_given)
    write_into_file(outfile, "gcn", 0, 0 );
  if (args_info->hbond_given)
    write_into_file(outfile, "hbond", 0, 0 );
  if (args_info->potDiff_given)
    write_into_file(outfile, "potDiff", 0, 0 );
  if (args_info->tet_hb_given)
    write_into_file(outfile, "tet_hb", 0, 0 );
  if (args_info->kirkwood_given)
    write_into_file(outfile, "kirkwood", 0, 0 );
  if (args_info->kirkwoodQ_given)
    write_into_file(outfile, "kirkwoodQ", 0, 0 );
  if (args_info->densityfield_given)
    write_into_file(outfile, "densityfield", 0, 0 );
  if (args_info->velocityfield_given)
    write_into_file(outfile, "velocityfield", 0, 0 );
  if (args_info->velocityZ_given)
    write_into_file(outfile, "velocityZ", 0, 0 );
  if (args_info->eam_density_given)
    write_into_file(outfile, "eam_density", 0, 0 );
  if (args_info->net_charge_given)
    write_into_file(outfile, "net_charge", 0, 0 );
  if (args_info->current_density_given)
    write_into_file(outfile, "current_density", 0, 0 );
  if (args_info->chargez_given)
    write_into_file(outfile, "chargez", 0, 0 );
  if (args_info->charge_density_z_given)
    write_into_file(outfile, "charge_density_z", 0, 0 );
  if (args_info->countz_given)
    write_into_file(outfile, "countz", 0, 0 );
  if (args_info->momentum_distribution_given)
    write_into_file(outfile, "momentum_distribution", 0, 0 );
  if (args_info->dipole_orientation_given)
    write_into_file(outfile, "dipole_orientation", 0, 0 );
  if (args_info->order_prob_given)
    write_into_file(outfile, "order_prob", 0, 0 );
  

  i = EXIT_SUCCESS;
  return i;
}

int
cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  i = cmdline_parser_dump(outfile, args_info);
  fclose (outfile);

  return i;
}

void
cmdline_parser_free (struct gengetopt_args_info *args_info)
{
  cmdline_parser_release (args_info);
}

/** @brief replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = 0;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static void
reset_group_staticProps(struct gengetopt_args_info *args_info)
{
  if (! args_info->staticProps_group_counter)
    return;
  
  args_info->bo_given = 0 ;
  args_info->ior_given = 0 ;
  args_info->for_given = 0 ;
  args_info->bad_given = 0 ;
  args_info->count_given = 0 ;
  args_info->gofr_given = 0 ;
  args_info->gofz_given = 0 ;
  args_info->r_theta_given = 0 ;
  args_info->r_omega_given = 0 ;
  args_info->r_z_given = 0 ;
  args_info->theta_omega_given = 0 ;
  args_info->r_theta_omega_given = 0 ;
  args_info->gxyz_given = 0 ;
  args_info->twodgofr_given = 0 ;
  args_info->p2_given = 0 ;
  args_info->rp2_given = 0 ;
  args_info->scd_given = 0 ;
  args_info->density_given = 0 ;
  args_info->slab_density_given = 0 ;
  args_info->pipe_density_given = 0 ;
  args_info->p_angle_given = 0 ;
  args_info->hxy_given = 0 ;
  args_info->rho_r_given = 0 ;
  args_info->angle_r_given = 0 ;
  args_info->hullvol_given = 0 ;
  args_info->rodlength_given = 0 ;
  args_info->tet_param_given = 0 ;
  args_info->tet_param_z_given = 0 ;
  args_info->tet_param_dens_given = 0 ;
  args_info->tet_param_xyz_given = 0 ;
  args_info->rnemdz_given = 0 ;
  args_info->rnemdr_given = 0 ;
  args_info->rnemdrt_given = 0 ;
  args_info->nitrile_given = 0 ;
  args_info->multipole_given = 0 ;
  args_info->surfDiffusion_given = 0 ;
  args_info->cn_given = 0 ;
  args_info->scn_given = 0 ;
  args_info->gcn_given = 0 ;
  args_info->hbond_given = 0 ;
  args_info->potDiff_given = 0 ;
  args_info->tet_hb_given = 0 ;
  args_info->kirkwood_given = 0 ;
  args_info->kirkwoodQ_given = 0 ;
  args_info->densityfield_given = 0 ;
  args_info->velocityfield_given = 0 ;
  args_info->velocityZ_given = 0 ;
  args_info->eam_density_given = 0 ;
  args_info->net_charge_given = 0 ;
  args_info->current_density_given = 0 ;
  args_info->chargez_given = 0 ;
  args_info->charge_density_z_given = 0 ;
  args_info->countz_given = 0 ;
  args_info->momentum_distribution_given = 0 ;
  args_info->dipole_orientation_given = 0 ;
  args_info->order_prob_given = 0 ;

  args_info->staticProps_group_counter = 0;
}

int
cmdline_parser (int argc, char **argv, struct gengetopt_args_info *args_info)
{
  return cmdline_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
cmdline_parser_ext (int argc, char **argv, struct gengetopt_args_info *args_info,
                   struct cmdline_parser_params *params)
{
  int result;
  result = cmdline_parser_internal (argc, argv, args_info, params, 0);

  return result;
}

int
cmdline_parser2 (int argc, char **argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;
  struct cmdline_parser_params params;
  
  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;

  result = cmdline_parser_internal (argc, argv, args_info, &params, 0);

  return result;
}

int
cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (cmdline_parser_required2(args_info, prog_name, 0) > 0)
    result = EXIT_FAILURE;

  return result;
}

int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error_occurred = 0;
  FIX_UNUSED (additional_error);

  /* checks for required options */
  if (! args_info->input_given)
    {
      fprintf (stderr, "%s: '--input' ('-i') option required%s\n", prog_name, (additional_error ? additional_error : ""));
      error_occurred = 1;
    }
  
  if (args_info->staticProps_group_counter == 0)
    {
      fprintf (stderr, "%s: %d options of group staticProps were given. One is required%s.\n", prog_name, args_info->staticProps_group_counter, (additional_error ? additional_error : ""));
      error_occurred = 1;
    }
  

  /* checks for dependences among options */

  return error_occurred;
}

/*
 * Extracted from the glibc source tree, version 2.3.6
 *
 * Licensed under the GPL as per the whole glibc source tree.
 *
 * This file was modified so that getopt_long can be called
 * many times without risking previous memory to be spoiled.
 *
 * Modified by Andre Noll and Lorenzo Bettini for use in
 * GNU gengetopt generated files.
 *
 */

/* 
 * we must include anything we need since this file is not thought to be
 * inserted in a file already using getopt.h
 *
 * Lorenzo
 */

struct option
{
  const char *name;
  /* has_arg can't be an enum because some compilers complain about
     type mismatches in all the code that assumes it is an int.  */
  int has_arg;
  int *flag;
  int val;
};

/* This version of `getopt' appears to the caller like standard Unix `getopt'
   but it behaves differently for the user, since it allows the user
   to intersperse the options with the other arguments.

   As `getopt' works, it permutes the elements of ARGV so that,
   when it is done, all the options precede everything else.  Thus
   all application programs are extended to handle flexible argument order.
*/
/*
   If the field `flag' is not NULL, it points to a variable that is set
   to the value given in the field `val' when the option is found, but
   left unchanged if the option is not found.

   To have a long-named option do something other than set an `int' to
   a compiled-in constant, such as set a value from `custom_optarg', set the
   option's `flag' field to zero and its `val' field to a nonzero
   value (the equivalent single-letter option character, if there is
   one).  For long options that have a zero `flag' field, `getopt'
   returns the contents of the `val' field.  */

/* Names for the values of the `has_arg' field of `struct option'.  */
#ifndef no_argument
#define no_argument		0
#endif

#ifndef required_argument
#define required_argument	1
#endif

#ifndef optional_argument
#define optional_argument	2
#endif

struct custom_getopt_data {
	/*
	 * These have exactly the same meaning as the corresponding global variables,
	 * except that they are used for the reentrant versions of getopt.
	 */
	int custom_optind;
	int custom_opterr;
	int custom_optopt;
	char *custom_optarg;

	/* True if the internal members have been initialized.  */
	int initialized;

	/*
	 * The next char to be scanned in the option-element in which the last option
	 * character we returned was found.  This allows us to pick up the scan where
	 * we left off.  If this is zero, or a null string, it means resume the scan by
	 * advancing to the next ARGV-element.
	 */
	char *nextchar;

	/*
	 * Describe the part of ARGV that contains non-options that have been skipped.
	 * `first_nonopt' is the index in ARGV of the first of them; `last_nonopt' is
	 * the index after the last of them.
	 */
	int first_nonopt;
	int last_nonopt;
};

/*
 * the variables optarg, optind, opterr and optopt are renamed with
 * the custom_ prefix so that they don't interfere with getopt ones.
 *
 * Moreover they're static so they are visible only from within the
 * file where this very file will be included.
 */

/*
 * For communication from `custom_getopt' to the caller.  When `custom_getopt' finds an
 * option that takes an argument, the argument value is returned here.
 */
static char *custom_optarg;

/*
 * Index in ARGV of the next element to be scanned.  This is used for
 * communication to and from the caller and for communication between
 * successive calls to `custom_getopt'.
 *
 * On entry to `custom_getopt', 1 means this is the first call; initialize.
 *
 * When `custom_getopt' returns -1, this is the index of the first of the non-option
 * elements that the caller should itself scan.
 *
 * Otherwise, `custom_optind' communicates from one call to the next how much of ARGV
 * has been scanned so far.
 *
 * 1003.2 says this must be 1 before any call.
 */
static int custom_optind = 1;

/*
 * Callers store zero here to inhibit the error message for unrecognized
 * options.
 */
static int custom_opterr = 1;

/*
 * Set to an option character which was unrecognized.  This must be initialized
 * on some systems to avoid linking in the system's own getopt implementation.
 */
static int custom_optopt = '?';

/*
 * Exchange two adjacent subsequences of ARGV.  One subsequence is elements
 * [first_nonopt,last_nonopt) which contains all the non-options that have been
 * skipped so far.  The other is elements [last_nonopt,custom_optind), which contains
 * all the options processed since those non-options were skipped.
 * `first_nonopt' and `last_nonopt' are relocated so that they describe the new
 * indices of the non-options in ARGV after they are moved.
 */
static void exchange(char **argv, struct custom_getopt_data *d)
{
	int bottom = d->first_nonopt;
	int middle = d->last_nonopt;
	int top = d->custom_optind;
	char *tem;

	/*
	 * Exchange the shorter segment with the far end of the longer segment.
	 * That puts the shorter segment into the right place.  It leaves the
	 * longer segment in the right place overall, but it consists of two
	 * parts that need to be swapped next.
	 */
	while (top > middle && middle > bottom) {
		if (top - middle > middle - bottom) {
			/* Bottom segment is the short one.  */
			int len = middle - bottom;
			int i;

			/* Swap it with the top part of the top segment.  */
			for (i = 0; i < len; i++) {
				tem = argv[bottom + i];
				argv[bottom + i] =
					argv[top - (middle - bottom) + i];
				argv[top - (middle - bottom) + i] = tem;
			}
			/* Exclude the moved bottom segment from further swapping.  */
			top -= len;
		} else {
			/* Top segment is the short one.  */
			int len = top - middle;
			int i;

			/* Swap it with the bottom part of the bottom segment.  */
			for (i = 0; i < len; i++) {
				tem = argv[bottom + i];
				argv[bottom + i] = argv[middle + i];
				argv[middle + i] = tem;
			}
			/* Exclude the moved top segment from further swapping.  */
			bottom += len;
		}
	}
	/* Update records for the slots the non-options now occupy.  */
	d->first_nonopt += (d->custom_optind - d->last_nonopt);
	d->last_nonopt = d->custom_optind;
}

/* Initialize the internal data when the first call is made.  */
static void custom_getopt_initialize(struct custom_getopt_data *d)
{
	/*
	 * Start processing options with ARGV-element 1 (since ARGV-element 0
	 * is the program name); the sequence of previously skipped non-option
	 * ARGV-elements is empty.
	 */
	d->first_nonopt = d->last_nonopt = d->custom_optind;
	d->nextchar = NULL;
	d->initialized = 1;
}

#define NONOPTION_P (argv[d->custom_optind][0] != '-' || argv[d->custom_optind][1] == '\0')

/* return: zero: continue, nonzero: return given value to user */
static int shuffle_argv(int argc, char *const *argv,const struct option *longopts,
	struct custom_getopt_data *d)
{
	/*
	 * Give FIRST_NONOPT & LAST_NONOPT rational values if CUSTOM_OPTIND has been
	 * moved back by the user (who may also have changed the arguments).
	 */
	if (d->last_nonopt > d->custom_optind)
		d->last_nonopt = d->custom_optind;
	if (d->first_nonopt > d->custom_optind)
		d->first_nonopt = d->custom_optind;
	/*
	 * If we have just processed some options following some
	 * non-options, exchange them so that the options come first.
	 */
	if (d->first_nonopt != d->last_nonopt &&
			d->last_nonopt != d->custom_optind)
		exchange((char **) argv, d);
	else if (d->last_nonopt != d->custom_optind)
		d->first_nonopt = d->custom_optind;
	/*
	 * Skip any additional non-options and extend the range of
	 * non-options previously skipped.
	 */
	while (d->custom_optind < argc && NONOPTION_P)
		d->custom_optind++;
	d->last_nonopt = d->custom_optind;
	/*
	 * The special ARGV-element `--' means premature end of options.  Skip
	 * it like a null option, then exchange with previous non-options as if
	 * it were an option, then skip everything else like a non-option.
	 */
	if (d->custom_optind != argc && !strcmp(argv[d->custom_optind], "--")) {
		d->custom_optind++;
		if (d->first_nonopt != d->last_nonopt
				&& d->last_nonopt != d->custom_optind)
			exchange((char **) argv, d);
		else if (d->first_nonopt == d->last_nonopt)
			d->first_nonopt = d->custom_optind;
		d->last_nonopt = argc;
		d->custom_optind = argc;
	}
	/*
	 * If we have done all the ARGV-elements, stop the scan and back over
	 * any non-options that we skipped and permuted.
	 */
	if (d->custom_optind == argc) {
		/*
		 * Set the next-arg-index to point at the non-options that we
		 * previously skipped, so the caller will digest them.
		 */
		if (d->first_nonopt != d->last_nonopt)
			d->custom_optind = d->first_nonopt;
		return -1;
	}
	/*
	 * If we have come to a non-option and did not permute it, either stop
	 * the scan or describe it to the caller and pass it by.
	 */
	if (NONOPTION_P) {
		d->custom_optarg = argv[d->custom_optind++];
		return 1;
	}
	/*
	 * We have found another option-ARGV-element. Skip the initial
	 * punctuation.
	 */
	d->nextchar = (argv[d->custom_optind] + 1 + (longopts != NULL && argv[d->custom_optind][1] == '-'));
	return 0;
}

/*
 * Check whether the ARGV-element is a long option.
 *
 * If there's a long option "fubar" and the ARGV-element is "-fu", consider
 * that an abbreviation of the long option, just like "--fu", and not "-f" with
 * arg "u".
 *
 * This distinction seems to be the most useful approach.
 *
 */
static int check_long_opt(int argc, char *const *argv, const char *optstring,
		const struct option *longopts, int *longind,
		int print_errors, struct custom_getopt_data *d)
{
	char *nameend;
	const struct option *p;
	const struct option *pfound = NULL;
	int exact = 0;
	int ambig = 0;
	int indfound = -1;
	int option_index;

	for (nameend = d->nextchar; *nameend && *nameend != '='; nameend++)
		/* Do nothing.  */ ;

	/* Test all long options for either exact match or abbreviated matches */
	for (p = longopts, option_index = 0; p->name; p++, option_index++)
		if (!strncmp(p->name, d->nextchar, nameend - d->nextchar)) {
			if ((unsigned int) (nameend - d->nextchar)
					== (unsigned int) strlen(p->name)) {
				/* Exact match found.  */
				pfound = p;
				indfound = option_index;
				exact = 1;
				break;
			} else if (pfound == NULL) {
				/* First nonexact match found.  */
				pfound = p;
				indfound = option_index;
			} else if (pfound->has_arg != p->has_arg
					|| pfound->flag != p->flag
					|| pfound->val != p->val)
				/* Second or later nonexact match found.  */
				ambig = 1;
		}
	if (ambig && !exact) {
		if (print_errors) {
			fprintf(stderr,
				"%s: option `%s' is ambiguous\n",
				argv[0], argv[d->custom_optind]);
		}
		d->nextchar += strlen(d->nextchar);
		d->custom_optind++;
		d->custom_optopt = 0;
		return '?';
	}
	if (pfound) {
		option_index = indfound;
		d->custom_optind++;
		if (*nameend) {
			if (pfound->has_arg != no_argument)
				d->custom_optarg = nameend + 1;
			else {
				if (print_errors) {
					if (argv[d->custom_optind - 1][1] == '-') {
						/* --option */
						fprintf(stderr, "%s: option `--%s' doesn't allow an argument\n",
							argv[0], pfound->name);
					} else {
						/* +option or -option */
						fprintf(stderr, "%s: option `%c%s' doesn't allow an argument\n",
							argv[0], argv[d->custom_optind - 1][0], pfound->name);
					}

				}
				d->nextchar += strlen(d->nextchar);
				d->custom_optopt = pfound->val;
				return '?';
			}
		} else if (pfound->has_arg == required_argument) {
			if (d->custom_optind < argc)
				d->custom_optarg = argv[d->custom_optind++];
			else {
				if (print_errors) {
					fprintf(stderr,
						"%s: option `%s' requires an argument\n",
						argv[0],
						argv[d->custom_optind - 1]);
				}
				d->nextchar += strlen(d->nextchar);
				d->custom_optopt = pfound->val;
				return optstring[0] == ':' ? ':' : '?';
			}
		}
		d->nextchar += strlen(d->nextchar);
		if (longind != NULL)
			*longind = option_index;
		if (pfound->flag) {
			*(pfound->flag) = pfound->val;
			return 0;
		}
		return pfound->val;
	}
	/*
	 * Can't find it as a long option.  If this is not getopt_long_only, or
	 * the option starts with '--' or is not a valid short option, then
	 * it's an error.  Otherwise interpret it as a short option.
	 */
	if (print_errors) {
		if (argv[d->custom_optind][1] == '-') {
			/* --option */
			fprintf(stderr,
				"%s: unrecognized option `--%s'\n",
				argv[0], d->nextchar);
		} else {
			/* +option or -option */
			fprintf(stderr,
				"%s: unrecognized option `%c%s'\n",
				argv[0], argv[d->custom_optind][0],
				d->nextchar);
		}
	}
	d->nextchar = (char *) "";
	d->custom_optind++;
	d->custom_optopt = 0;
	return '?';
}

static int check_short_opt(int argc, char *const *argv, const char *optstring,
		int print_errors, struct custom_getopt_data *d)
{
	char c = *d->nextchar++;
	const char *temp = strchr(optstring, c);

	/* Increment `custom_optind' when we start to process its last character.  */
	if (*d->nextchar == '\0')
		++d->custom_optind;
	if (!temp || c == ':') {
		if (print_errors)
			fprintf(stderr, "%s: invalid option -- %c\n", argv[0], c);

		d->custom_optopt = c;
		return '?';
	}
	if (temp[1] == ':') {
		if (temp[2] == ':') {
			/* This is an option that accepts an argument optionally.  */
			if (*d->nextchar != '\0') {
				d->custom_optarg = d->nextchar;
				d->custom_optind++;
			} else
				d->custom_optarg = NULL;
			d->nextchar = NULL;
		} else {
			/* This is an option that requires an argument.  */
			if (*d->nextchar != '\0') {
				d->custom_optarg = d->nextchar;
				/*
				 * If we end this ARGV-element by taking the
				 * rest as an arg, we must advance to the next
				 * element now.
				 */
				d->custom_optind++;
			} else if (d->custom_optind == argc) {
				if (print_errors) {
					fprintf(stderr,
						"%s: option requires an argument -- %c\n",
						argv[0], c);
				}
				d->custom_optopt = c;
				if (optstring[0] == ':')
					c = ':';
				else
					c = '?';
			} else
				/*
				 * We already incremented `custom_optind' once;
				 * increment it again when taking next ARGV-elt
				 * as argument.
				 */
				d->custom_optarg = argv[d->custom_optind++];
			d->nextchar = NULL;
		}
	}
	return c;
}

/*
 * Scan elements of ARGV for option characters given in OPTSTRING.
 *
 * If an element of ARGV starts with '-', and is not exactly "-" or "--",
 * then it is an option element.  The characters of this element
 * (aside from the initial '-') are option characters.  If `getopt'
 * is called repeatedly, it returns successively each of the option characters
 * from each of the option elements.
 *
 * If `getopt' finds another option character, it returns that character,
 * updating `custom_optind' and `nextchar' so that the next call to `getopt' can
 * resume the scan with the following option character or ARGV-element.
 *
 * If there are no more option characters, `getopt' returns -1.
 * Then `custom_optind' is the index in ARGV of the first ARGV-element
 * that is not an option.  (The ARGV-elements have been permuted
 * so that those that are not options now come last.)
 *
 * OPTSTRING is a string containing the legitimate option characters.
 * If an option character is seen that is not listed in OPTSTRING,
 * return '?' after printing an error message.  If you set `custom_opterr' to
 * zero, the error message is suppressed but we still return '?'.
 *
 * If a char in OPTSTRING is followed by a colon, that means it wants an arg,
 * so the following text in the same ARGV-element, or the text of the following
 * ARGV-element, is returned in `custom_optarg'.  Two colons mean an option that
 * wants an optional arg; if there is text in the current ARGV-element,
 * it is returned in `custom_optarg', otherwise `custom_optarg' is set to zero.
 *
 * If OPTSTRING starts with `-' or `+', it requests different methods of
 * handling the non-option ARGV-elements.
 * See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
 *
 * Long-named options begin with `--' instead of `-'.
 * Their names may be abbreviated as long as the abbreviation is unique
 * or is an exact match for some defined option.  If they have an
 * argument, it follows the option name in the same ARGV-element, separated
 * from the option name by a `=', or else the in next ARGV-element.
 * When `getopt' finds a long-named option, it returns 0 if that option's
 * `flag' field is nonzero, the value of the option's `val' field
 * if the `flag' field is zero.
 *
 * The elements of ARGV aren't really const, because we permute them.
 * But we pretend they're const in the prototype to be compatible
 * with other systems.
 *
 * LONGOPTS is a vector of `struct option' terminated by an
 * element containing a name which is zero.
 *
 * LONGIND returns the index in LONGOPT of the long-named option found.
 * It is only valid when a long-named option has been found by the most
 * recent call.
 *
 * Return the option character from OPTS just read.  Return -1 when there are
 * no more options.  For unrecognized options, or options missing arguments,
 * `custom_optopt' is set to the option letter, and '?' is returned.
 *
 * The OPTS string is a list of characters which are recognized option letters,
 * optionally followed by colons, specifying that that letter takes an
 * argument, to be placed in `custom_optarg'.
 *
 * If a letter in OPTS is followed by two colons, its argument is optional.
 * This behavior is specific to the GNU `getopt'.
 *
 * The argument `--' causes premature termination of argument scanning,
 * explicitly telling `getopt' that there are no more options.  If OPTS begins
 * with `--', then non-option arguments are treated as arguments to the option
 * '\0'.  This behavior is specific to the GNU `getopt'.
 */

static int getopt_internal_r(int argc, char *const *argv, const char *optstring,
		const struct option *longopts, int *longind,
		struct custom_getopt_data *d)
{
	int ret, print_errors = d->custom_opterr;

	if (optstring[0] == ':')
		print_errors = 0;
	if (argc < 1)
		return -1;
	d->custom_optarg = NULL;

	/* 
	 * This is a big difference with GNU getopt, since optind == 0
	 * means initialization while here 1 means first call.
	 */
	if (d->custom_optind == 0 || !d->initialized) {
		if (d->custom_optind == 0)
			d->custom_optind = 1;	/* Don't scan ARGV[0], the program name.  */
		custom_getopt_initialize(d);
	}
	if (d->nextchar == NULL || *d->nextchar == '\0') {
		ret = shuffle_argv(argc, argv, longopts, d);
		if (ret)
			return ret;
	}
	if (longopts && (argv[d->custom_optind][1] == '-' ))
		return check_long_opt(argc, argv, optstring, longopts,
			longind, print_errors, d);
	return check_short_opt(argc, argv, optstring, print_errors, d);
}

static int custom_getopt_internal(int argc, char *const *argv, const char *optstring,
	const struct option *longopts, int *longind)
{
	int result;
	/* Keep a global copy of all internal members of d */
	static struct custom_getopt_data d;

	d.custom_optind = custom_optind;
	d.custom_opterr = custom_opterr;
	result = getopt_internal_r(argc, argv, optstring, longopts,
		longind, &d);
	custom_optind = d.custom_optind;
	custom_optarg = d.custom_optarg;
	custom_optopt = d.custom_optopt;
	return result;
}

static int custom_getopt_long (int argc, char *const *argv, const char *options,
	const struct option *long_options, int *opt_index)
{
	return custom_getopt_internal(argc, argv, options, long_options,
		opt_index);
}


static char *package_name = 0;

/**
 * @brief updates an option
 * @param field the generic pointer to the field to update
 * @param orig_field the pointer to the orig field
 * @param field_given the pointer to the number of occurrence of this option
 * @param prev_given the pointer to the number of occurrence already seen
 * @param value the argument for this option (if null no arg was specified)
 * @param possible_values the possible values for this option (if specified)
 * @param default_value the default value (in case the option only accepts fixed values)
 * @param arg_type the type of this option
 * @param check_ambiguity @see cmdline_parser_params.check_ambiguity
 * @param override @see cmdline_parser_params.override
 * @param no_free whether to free a possible previous value
 * @param multiple_option whether this is a multiple option
 * @param long_opt the corresponding long option
 * @param short_opt the corresponding short option (or '-' if none)
 * @param additional_error possible further error specification
 */
static
int update_arg(void *field, char **orig_field,
               unsigned int *field_given, unsigned int *prev_given, 
               char *value, const char *possible_values[],
               const char *default_value,
               cmdline_parser_arg_type arg_type,
               int check_ambiguity, int override,
               int no_free, int multiple_option,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  char *stop_char = 0;
  const char *val = value;
  int found;
  char **string_field;
  FIX_UNUSED (field);

  stop_char = 0;
  found = 0;

  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
    {
      if (short_opt != '-')
        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
               package_name, long_opt, short_opt,
               (additional_error ? additional_error : ""));
      else
        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
               package_name, long_opt,
               (additional_error ? additional_error : ""));
      return 1; /* failure */
    }

  if (possible_values && (found = check_possible_values((value ? value : default_value), possible_values)) < 0)
    {
      if (short_opt != '-')
        fprintf (stderr, "%s: %s argument, \"%s\", for option `--%s' (`-%c')%s\n", 
          package_name, (found == -2) ? "ambiguous" : "invalid", value, long_opt, short_opt,
          (additional_error ? additional_error : ""));
      else
        fprintf (stderr, "%s: %s argument, \"%s\", for option `--%s'%s\n", 
          package_name, (found == -2) ? "ambiguous" : "invalid", value, long_opt,
          (additional_error ? additional_error : ""));
      return 1; /* failure */
    }
    
  if (field_given && *field_given && ! override)
    return 0;
  if (prev_given)
    (*prev_given)++;
  if (field_given)
    (*field_given)++;
  if (possible_values)
    val = possible_values[found];

  switch(arg_type) {
  case ARG_FLAG:
    *((int *)field) = !*((int *)field);
    break;
  case ARG_INT:
    if (val) *((int *)field) = strtol (val, &stop_char, 0);
    break;
  case ARG_DOUBLE:
    if (val) *((double *)field) = strtod (val, &stop_char);
    break;
  case ARG_ENUM:
    if (val) *((int *)field) = found;
    break;
  case ARG_STRING:
    if (val) {
      string_field = (char **)field;
      if (!no_free && *string_field)
        free (*string_field); /* free previous string */
      *string_field = gengetopt_strdup (val);
    }
    break;
  default:
    break;
  };

  /* check numeric conversion */
  switch(arg_type) {
  case ARG_INT:
  case ARG_DOUBLE:
    if (val && !(stop_char && *stop_char == '\0')) {
      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
      return 1; /* failure */
    }
    break;
  default:
    ;
  };

  /* store the original value */
  switch(arg_type) {
  case ARG_NO:
  case ARG_FLAG:
    break;
  default:
    if (value && orig_field) {
      if (no_free) {
        *orig_field = value;
      } else {
        if (*orig_field)
          free (*orig_field); /* free previous string */
        *orig_field = gengetopt_strdup (value);
      }
    }
  };

  return 0; /* OK */
}


int
cmdline_parser_internal (
  int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */

  int error_occurred = 0;
  struct gengetopt_args_info local_args_info;
  
  int override;
  int initialize;
  int check_required;
  int check_ambiguity;

  char *optarg;
  int optind;
  int opterr;
  int optopt;
  
  package_name = argv[0];
  
  /* TODO: Why is this here? It is not used anywhere. */
  override = params->override;
  FIX_UNUSED(override);

  initialize = params->initialize;
  check_required = params->check_required;

  /* TODO: Why is this here? It is not used anywhere. */
  check_ambiguity = params->check_ambiguity;
  FIX_UNUSED(check_ambiguity);

  if (initialize)
    cmdline_parser_init (args_info);

  cmdline_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = params->print_errors;
  optopt = '?';

  while (1)
    {
      int option_index = 0;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "input",	1, NULL, 'i' },
        { "output",	1, NULL, 'o' },
        { "step",	1, NULL, 'n' },
        { "nbins",	1, NULL, 'b' },
        { "nbins_x",	1, NULL, 'x' },
        { "nbins_y",	1, NULL, 'y' },
        { "nbins_z",	1, NULL, 0 },
        { "nrbins",	1, NULL, 'r' },
        { "nanglebins",	1, NULL, 'a' },
        { "rcut",	1, NULL, 'c' },
        { "OOcut",	1, NULL, 0 },
        { "thetacut",	1, NULL, 0 },
        { "OHcut",	1, NULL, 0 },
        { "dz",	1, NULL, 0 },
        { "length",	1, NULL, 0 },
        { "zlength",	1, NULL, 0 },
        { "zoffset",	1, NULL, 'z' },
        { "sele1",	1, NULL, 0 },
        { "sele2",	1, NULL, 0 },
        { "sele3",	1, NULL, 0 },
        { "refsele",	1, NULL, 0 },
        { "comsele",	1, NULL, 0 },
        { "seleoffset",	1, NULL, 0 },
        { "seleoffset2",	1, NULL, 0 },
        { "molname",	1, NULL, 0 },
        { "begin",	1, NULL, 0 },
        { "end",	1, NULL, 0 },
        { "radius",	1, NULL, 0 },
        { "voxelSize",	1, NULL, 'v' },
        { "gaussWidth",	1, NULL, 0 },
        { "privilegedAxis",	1, NULL, 0 },
        { "privilegedAxis2",	1, NULL, 0 },
        { "momentum",	1, NULL, 0 },
        { "component",	1, NULL, 0 },
        { "dipoleX",	1, NULL, 0 },
        { "dipoleY",	1, NULL, 0 },
        { "dipoleZ",	1, NULL, 0 },
        { "v_radius",	1, NULL, 0 },
        { "gen_xyz",	0, NULL, 0 },
        { "atom_name",	1, NULL, 0 },
        { "bo",	0, NULL, 0 },
        { "ior",	0, NULL, 0 },
        { "for",	0, NULL, 0 },
        { "bad",	0, NULL, 0 },
        { "count",	0, NULL, 0 },
        { "gofr",	0, NULL, 'g' },
        { "gofz",	0, NULL, 0 },
        { "r_theta",	0, NULL, 0 },
        { "r_omega",	0, NULL, 0 },
        { "r_z",	0, NULL, 0 },
        { "theta_omega",	0, NULL, 0 },
        { "r_theta_omega",	0, NULL, 0 },
        { "gxyz",	0, NULL, 0 },
        { "twodgofr",	0, NULL, 0 },
        { "p2",	0, NULL, 'p' },
        { "rp2",	0, NULL, 0 },
        { "scd",	0, NULL, 's' },
        { "density",	0, NULL, 'd' },
        { "slab_density",	0, NULL, 0 },
        { "pipe_density",	0, NULL, 0 },
        { "p_angle",	0, NULL, 0 },
        { "hxy",	0, NULL, 0 },
        { "rho_r",	0, NULL, 0 },
        { "angle_r",	0, NULL, 0 },
        { "hullvol",	0, NULL, 0 },
        { "rodlength",	0, NULL, 0 },
        { "tet_param",	0, NULL, 'Q' },
        { "tet_param_z",	0, NULL, 0 },
        { "tet_param_dens",	0, NULL, 0 },
        { "tet_param_xyz",	0, NULL, 0 },
        { "rnemdz",	0, NULL, 0 },
        { "rnemdr",	0, NULL, 0 },
        { "rnemdrt",	0, NULL, 0 },
        { "nitrile",	0, NULL, 0 },
        { "multipole",	0, NULL, 'm' },
        { "surfDiffusion",	0, NULL, 0 },
        { "cn",	0, NULL, 0 },
        { "scn",	0, NULL, 0 },
        { "gcn",	0, NULL, 0 },
        { "hbond",	0, NULL, 0 },
        { "potDiff",	0, NULL, 0 },
        { "tet_hb",	0, NULL, 0 },
        { "kirkwood",	0, NULL, 'k' },
        { "kirkwoodQ",	0, NULL, 0 },
        { "densityfield",	0, NULL, 0 },
        { "velocityfield",	0, NULL, 0 },
        { "velocityZ",	0, NULL, 0 },
        { "eam_density",	0, NULL, 'D' },
        { "net_charge",	0, NULL, 'q' },
        { "current_density",	0, NULL, 'J' },
        { "chargez",	0, NULL, 0 },
        { "charge_density_z",	0, NULL, 0 },
        { "countz",	0, NULL, 0 },
        { "momentum_distribution",	0, NULL, 'M' },
        { "dipole_orientation",	0, NULL, 'S' },
        { "order_prob",	0, NULL, 0 },
        { 0,  0, 0, 0 }
      };

      custom_optarg = optarg;
      custom_optind = optind;
      custom_opterr = opterr;
      custom_optopt = optopt;

      c = custom_getopt_long (argc, argv, "hVi:o:n:b:x:y:r:a:c:z:v:gpsdQmkDqJMS", long_options, &option_index);

      optarg = custom_optarg;
      optind = custom_optind;
      opterr = custom_opterr;
      optopt = custom_optopt;

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          cmdline_parser_print_help ();
          cmdline_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          cmdline_parser_print_version ();
          cmdline_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'i':	/* input dump file.  */
        
        
          if (update_arg( (void *)&(args_info->input_arg), 
               &(args_info->input_orig), &(args_info->input_given),
              &(local_args_info.input_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "input", 'i',
              additional_error))
            goto failure;
        
          break;
        case 'o':	/* output file name.  */
        
        
          if (update_arg( (void *)&(args_info->output_arg), 
               &(args_info->output_orig), &(args_info->output_given),
              &(local_args_info.output_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "output", 'o',
              additional_error))
            goto failure;
        
          break;
        case 'n':	/* process every n frame.  */
        
        
          if (update_arg( (void *)&(args_info->step_arg), 
               &(args_info->step_orig), &(args_info->step_given),
              &(local_args_info.step_given), optarg, 0, "1", ARG_INT,
              check_ambiguity, override, 0, 0,
              "step", 'n',
              additional_error))
            goto failure;
        
          break;
        case 'b':	/* number of bins (general purpose).  */
        
        
          if (update_arg( (void *)&(args_info->nbins_arg), 
               &(args_info->nbins_orig), &(args_info->nbins_given),
              &(local_args_info.nbins_given), optarg, 0, "100", ARG_INT,
              check_ambiguity, override, 0, 0,
              "nbins", 'b',
              additional_error))
            goto failure;
        
          break;
        case 'x':	/* number of bins in x axis.  */
        
        
          if (update_arg( (void *)&(args_info->nbins_x_arg), 
               &(args_info->nbins_x_orig), &(args_info->nbins_x_given),
              &(local_args_info.nbins_x_given), optarg, 0, "100", ARG_INT,
              check_ambiguity, override, 0, 0,
              "nbins_x", 'x',
              additional_error))
            goto failure;
        
          break;
        case 'y':	/* number of bins in y axis.  */
        
        
          if (update_arg( (void *)&(args_info->nbins_y_arg), 
               &(args_info->nbins_y_orig), &(args_info->nbins_y_given),
              &(local_args_info.nbins_y_given), optarg, 0, "100", ARG_INT,
              check_ambiguity, override, 0, 0,
              "nbins_y", 'y',
              additional_error))
            goto failure;
        
          break;
        case 'r':	/* number of radial bins (usually duplicates functionality of nbins).  */
        
        
          if (update_arg( (void *)&(args_info->nrbins_arg), 
               &(args_info->nrbins_orig), &(args_info->nrbins_given),
              &(local_args_info.nrbins_given), optarg, 0, "100", ARG_INT,
              check_ambiguity, override, 0, 0,
              "nrbins", 'r',
              additional_error))
            goto failure;
        
          break;
        case 'a':	/* number of bins for cos(angle).  */
        
        
          if (update_arg( (void *)&(args_info->nanglebins_arg), 
               &(args_info->nanglebins_orig), &(args_info->nanglebins_given),
              &(local_args_info.nanglebins_given), optarg, 0, "50", ARG_INT,
              check_ambiguity, override, 0, 0,
              "nanglebins", 'a',
              additional_error))
            goto failure;
        
          break;
        case 'c':	/* cutoff radius (rcut).  */
        
        
          if (update_arg( (void *)&(args_info->rcut_arg), 
               &(args_info->rcut_orig), &(args_info->rcut_given),
              &(local_args_info.rcut_given), optarg, 0, 0, ARG_DOUBLE,
              check_ambiguity, override, 0, 0,
              "rcut", 'c',
              additional_error))
            goto failure;
        
          break;
        case 'z':	/* Where to set the zero for the slab_density calculation.  */
        
        
          if (update_arg( (void *)&(args_info->zoffset_arg), 
               &(args_info->zoffset_orig), &(args_info->zoffset_given),
              &(local_args_info.zoffset_given), optarg, 0, "0", ARG_DOUBLE,
              check_ambiguity, override, 0, 0,
              "zoffset", 'z',
              additional_error))
            goto failure;
        
          break;
        case 'v':	/* voxel size (angstroms).  */
        
        
          if (update_arg( (void *)&(args_info->voxelSize_arg), 
               &(args_info->voxelSize_orig), &(args_info->voxelSize_given),
              &(local_args_info.voxelSize_given), optarg, 0, 0, ARG_DOUBLE,
              check_ambiguity, override, 0, 0,
              "voxelSize", 'v',
              additional_error))
            goto failure;
        
          break;
        case 'g':	/* g(r).  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->gofr_given),
              &(local_args_info.gofr_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "gofr", 'g',
              additional_error))
            goto failure;
        
          break;
        case 'p':	/* p2 order parameter (--sele1 must be specified, --sele2 is optional).  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->p2_given),
              &(local_args_info.p2_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "p2", 'p',
              additional_error))
            goto failure;
        
          break;
        case 's':	/* scd order parameter (either --sele1, --sele2, --sele3 are specified or --molname, --begin, --end are specified).  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->scd_given),
              &(local_args_info.scd_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "scd", 's',
              additional_error))
            goto failure;
        
          break;
        case 'd':	/* density plot.  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->density_given),
              &(local_args_info.density_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "density", 'd',
              additional_error))
            goto failure;
        
          break;
        case 'Q':	/* tetrahedrality order parameter (Qk).  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->tet_param_given),
              &(local_args_info.tet_param_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "tet_param", 'Q',
              additional_error))
            goto failure;
        
          break;
        case 'm':	/* average multipole moments contained within cutoff spheres as a function of radius.  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->multipole_given),
              &(local_args_info.multipole_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "multipole", 'm',
              additional_error))
            goto failure;
        
          break;
        case 'k':	/* distance-dependent Kirkwood factor.  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->kirkwood_given),
              &(local_args_info.kirkwood_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "kirkwood", 'k',
              additional_error))
            goto failure;
        
          break;
        case 'D':	/* computes an average eam density profile of the selected atom.  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->eam_density_given),
              &(local_args_info.eam_density_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "eam_density", 'D',
              additional_error))
            goto failure;
        
          break;
        case 'q':	/* computes an average charge profile of the selected atom.  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->net_charge_given),
              &(local_args_info.net_charge_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "net_charge", 'q',
              additional_error))
            goto failure;
        
          break;
        case 'J':	/* computes the current density for the selected atom.  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->current_density_given),
              &(local_args_info.current_density_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "current_density", 'J',
              additional_error))
            goto failure;
        
          break;
        case 'M':	/* computes the momentum distribution for the selected atom.  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->momentum_distribution_given),
              &(local_args_info.momentum_distribution_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "momentum_distribution", 'M',
              additional_error))
            goto failure;
        
          break;
        case 'S':	/* spatially-resolved dipole order parameter S(z), S = (3 Cos^2\\theta - 1)/2.  */
        
          if (args_info->staticProps_group_counter && override)
            reset_group_staticProps (args_info);
          args_info->staticProps_group_counter += 1;
        
          if (update_arg( 0 , 
               0 , &(args_info->dipole_orientation_given),
              &(local_args_info.dipole_orientation_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "dipole_orientation", 'S',
              additional_error))
            goto failure;
        
          break;

        case 0:	/* Long option with no short option */
          /* number of bins in z axis.  */
          if (strcmp (long_options[option_index].name, "nbins_z") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->nbins_z_arg), 
                 &(args_info->nbins_z_orig), &(args_info->nbins_z_given),
                &(local_args_info.nbins_z_given), optarg, 0, "100", ARG_INT,
                check_ambiguity, override, 0, 0,
                "nbins_z", '-',
                additional_error))
              goto failure;
          
          }
          /* Oxygen-Oxygen cutoff radius (angstroms).  */
          else if (strcmp (long_options[option_index].name, "OOcut") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->OOcut_arg), 
                 &(args_info->OOcut_orig), &(args_info->OOcut_given),
                &(local_args_info.OOcut_given), optarg, 0, "3.5", ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "OOcut", '-',
                additional_error))
              goto failure;
          
          }
          /* HOO cutoff angle (degrees).  */
          else if (strcmp (long_options[option_index].name, "thetacut") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->thetacut_arg), 
                 &(args_info->thetacut_orig), &(args_info->thetacut_given),
                &(local_args_info.thetacut_given), optarg, 0, "30", ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "thetacut", '-',
                additional_error))
              goto failure;
          
          }
          /* Oxygen-Hydrogen cutoff radius (angstroms).  */
          else if (strcmp (long_options[option_index].name, "OHcut") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->OHcut_arg), 
                 &(args_info->OHcut_orig), &(args_info->OHcut_given),
                &(local_args_info.OHcut_given), optarg, 0, "2.45", ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "OHcut", '-',
                additional_error))
              goto failure;
          
          }
          /* slab width (dz).  */
          else if (strcmp (long_options[option_index].name, "dz") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dz_arg), 
                 &(args_info->dz_orig), &(args_info->dz_given),
                &(local_args_info.dz_given), optarg, 0, 0, ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "dz", '-',
                additional_error))
              goto failure;
          
          }
          /* maximum length (Defaults to 1/2 smallest length of first frame).  */
          else if (strcmp (long_options[option_index].name, "length") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->length_arg), 
                 &(args_info->length_orig), &(args_info->length_given),
                &(local_args_info.length_given), optarg, 0, 0, ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "length", '-',
                additional_error))
              goto failure;
          
          }
          /* maximum length (Defaults to 1/2 smallest length of first frame).  */
          else if (strcmp (long_options[option_index].name, "zlength") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->zlength_arg), 
                 &(args_info->zlength_orig), &(args_info->zlength_given),
                &(local_args_info.zlength_given), optarg, 0, 0, ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "zlength", '-',
                additional_error))
              goto failure;
          
          }
          /* select the first stuntdouble set.  */
          else if (strcmp (long_options[option_index].name, "sele1") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->sele1_arg), 
                 &(args_info->sele1_orig), &(args_info->sele1_given),
                &(local_args_info.sele1_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "sele1", '-',
                additional_error))
              goto failure;
          
          }
          /* select the second stuntdouble set.  */
          else if (strcmp (long_options[option_index].name, "sele2") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->sele2_arg), 
                 &(args_info->sele2_orig), &(args_info->sele2_given),
                &(local_args_info.sele2_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "sele2", '-',
                additional_error))
              goto failure;
          
          }
          /* select the third stuntdouble set.  */
          else if (strcmp (long_options[option_index].name, "sele3") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->sele3_arg), 
                 &(args_info->sele3_orig), &(args_info->sele3_given),
                &(local_args_info.sele3_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "sele3", '-',
                additional_error))
              goto failure;
          
          }
          /* select reference (use and only use with --gxyz).  */
          else if (strcmp (long_options[option_index].name, "refsele") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->refsele_arg), 
                 &(args_info->refsele_orig), &(args_info->refsele_given),
                &(local_args_info.refsele_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "refsele", '-',
                additional_error))
              goto failure;
          
          }
          /* select stunt doubles for center-of-mass reference point.  */
          else if (strcmp (long_options[option_index].name, "comsele") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->comsele_arg), 
                 &(args_info->comsele_orig), &(args_info->comsele_given),
                &(local_args_info.comsele_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "comsele", '-',
                additional_error))
              goto failure;
          
          }
          /* global index offset for a second object (used to define a vector between sites in molecule).  */
          else if (strcmp (long_options[option_index].name, "seleoffset") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->seleoffset_arg), 
                 &(args_info->seleoffset_orig), &(args_info->seleoffset_given),
                &(local_args_info.seleoffset_given), optarg, 0, 0, ARG_INT,
                check_ambiguity, override, 0, 0,
                "seleoffset", '-',
                additional_error))
              goto failure;
          
          }
          /* global index offset for a third object (used to define a vector between sites in molecule).  */
          else if (strcmp (long_options[option_index].name, "seleoffset2") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->seleoffset2_arg), 
                 &(args_info->seleoffset2_orig), &(args_info->seleoffset2_given),
                &(local_args_info.seleoffset2_given), optarg, 0, 0, ARG_INT,
                check_ambiguity, override, 0, 0,
                "seleoffset2", '-',
                additional_error))
              goto failure;
          
          }
          /* molecule name.  */
          else if (strcmp (long_options[option_index].name, "molname") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->molname_arg), 
                 &(args_info->molname_orig), &(args_info->molname_given),
                &(local_args_info.molname_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "molname", '-',
                additional_error))
              goto failure;
          
          }
          /* begin internal index.  */
          else if (strcmp (long_options[option_index].name, "begin") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->begin_arg), 
                 &(args_info->begin_orig), &(args_info->begin_given),
                &(local_args_info.begin_given), optarg, 0, 0, ARG_INT,
                check_ambiguity, override, 0, 0,
                "begin", '-',
                additional_error))
              goto failure;
          
          }
          /* end internal index.  */
          else if (strcmp (long_options[option_index].name, "end") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->end_arg), 
                 &(args_info->end_orig), &(args_info->end_given),
                &(local_args_info.end_given), optarg, 0, 0, ARG_INT,
                check_ambiguity, override, 0, 0,
                "end", '-',
                additional_error))
              goto failure;
          
          }
          /* nanoparticle radius.  */
          else if (strcmp (long_options[option_index].name, "radius") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radius_arg), 
                 &(args_info->radius_orig), &(args_info->radius_given),
                &(local_args_info.radius_given), optarg, 0, 0, ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "radius", '-',
                additional_error))
              goto failure;
          
          }
          /* Gaussian width (angstroms).  */
          else if (strcmp (long_options[option_index].name, "gaussWidth") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->gaussWidth_arg), 
                 &(args_info->gaussWidth_orig), &(args_info->gaussWidth_given),
                &(local_args_info.gaussWidth_given), optarg, 0, 0, ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "gaussWidth", '-',
                additional_error))
              goto failure;
          
          }
          /* which axis is special for spatial analysis (default = z axis).  */
          else if (strcmp (long_options[option_index].name, "privilegedAxis") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->privilegedAxis_arg), 
                 &(args_info->privilegedAxis_orig), &(args_info->privilegedAxis_given),
                &(local_args_info.privilegedAxis_given), optarg, cmdline_parser_privilegedAxis_values, "z", ARG_ENUM,
                check_ambiguity, override, 0, 0,
                "privilegedAxis", '-',
                additional_error))
              goto failure;
          
          }
          /* which axis is special for spatial analysis (default = x axis).  */
          else if (strcmp (long_options[option_index].name, "privilegedAxis2") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->privilegedAxis2_arg), 
                 &(args_info->privilegedAxis2_orig), &(args_info->privilegedAxis2_given),
                &(local_args_info.privilegedAxis2_given), optarg, cmdline_parser_privilegedAxis2_values, "x", ARG_ENUM,
                check_ambiguity, override, 0, 0,
                "privilegedAxis2", '-',
                additional_error))
              goto failure;
          
          }
          /* Type of momentum whose distribtution is required (default = Liner Momentum).  */
          else if (strcmp (long_options[option_index].name, "momentum") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->momentum_arg), 
                 &(args_info->momentum_orig), &(args_info->momentum_given),
                &(local_args_info.momentum_given), optarg, cmdline_parser_momentum_values, "P", ARG_ENUM,
                check_ambiguity, override, 0, 0,
                "momentum", '-',
                additional_error))
              goto failure;
          
          }
          /* component of momentum for the momemtum distribution (default = z axis).  */
          else if (strcmp (long_options[option_index].name, "component") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->component_arg), 
                 &(args_info->component_orig), &(args_info->component_given),
                &(local_args_info.component_given), optarg, cmdline_parser_component_values, "z", ARG_ENUM,
                check_ambiguity, override, 0, 0,
                "component", '-',
                additional_error))
              goto failure;
          
          }
          /* X-component of the dipole with respect to body frame.  */
          else if (strcmp (long_options[option_index].name, "dipoleX") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dipoleX_arg), 
                 &(args_info->dipoleX_orig), &(args_info->dipoleX_given),
                &(local_args_info.dipoleX_given), optarg, 0, 0, ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "dipoleX", '-',
                additional_error))
              goto failure;
          
          }
          /* Y-component of the dipole with respect to body frame.  */
          else if (strcmp (long_options[option_index].name, "dipoleY") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dipoleY_arg), 
                 &(args_info->dipoleY_orig), &(args_info->dipoleY_given),
                &(local_args_info.dipoleY_given), optarg, 0, 0, ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "dipoleY", '-',
                additional_error))
              goto failure;
          
          }
          /* Z-component of the dipole with respect to body frame.  */
          else if (strcmp (long_options[option_index].name, "dipoleZ") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dipoleZ_arg), 
                 &(args_info->dipoleZ_orig), &(args_info->dipoleZ_given),
                &(local_args_info.dipoleZ_given), optarg, 0, 0, ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "dipoleZ", '-',
                additional_error))
              goto failure;
          
          }
          /* VanderWaals radiius for fictious atoms used in model eg. M site in TIP4P-FQ water model.  */
          else if (strcmp (long_options[option_index].name, "v_radius") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->v_radius_arg), 
                 &(args_info->v_radius_orig), &(args_info->v_radius_given),
                &(local_args_info.v_radius_given), optarg, 0, 0, ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "v_radius", '-',
                additional_error))
              goto failure;
          
          }
          /* generats xyz file.  */
          else if (strcmp (long_options[option_index].name, "gen_xyz") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->gen_xyz_flag), 0, &(args_info->gen_xyz_given),
                &(local_args_info.gen_xyz_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "gen_xyz", '-',
                additional_error))
              goto failure;
          
          }
          /* name of atom for with average charge to be generated.  */
          else if (strcmp (long_options[option_index].name, "atom_name") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->atom_name_arg), 
                 &(args_info->atom_name_orig), &(args_info->atom_name_given),
                &(local_args_info.atom_name_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "atom_name", '-',
                additional_error))
              goto failure;
          
          }
          /* bond order parameter (--rcut must be specified).  */
          else if (strcmp (long_options[option_index].name, "bo") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->bo_given),
                &(local_args_info.bo_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "bo", '-',
                additional_error))
              goto failure;
          
          }
          /* icosahedral bond order parameter as a function of radius (--rcut must be specified).  */
          else if (strcmp (long_options[option_index].name, "ior") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->ior_given),
                &(local_args_info.ior_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "ior", '-',
                additional_error))
              goto failure;
          
          }
          /* FCC bond order parameter as a function of radius (--rcut must be specified).  */
          else if (strcmp (long_options[option_index].name, "for") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->for_given),
                &(local_args_info.for_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "for", '-',
                additional_error))
              goto failure;
          
          }
          /* N(theta) bond angle density within (--rcut must be specified).  */
          else if (strcmp (long_options[option_index].name, "bad") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->bad_given),
                &(local_args_info.bad_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "bad", '-',
                additional_error))
              goto failure;
          
          }
          /* count of molecules matching selection criteria (and associated statistics).  */
          else if (strcmp (long_options[option_index].name, "count") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->count_given),
                &(local_args_info.count_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "count", '-',
                additional_error))
              goto failure;
          
          }
          /* g(z).  */
          else if (strcmp (long_options[option_index].name, "gofz") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->gofz_given),
                &(local_args_info.gofz_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "gofz", '-',
                additional_error))
              goto failure;
          
          }
          /* g(r, cos(theta)).  */
          else if (strcmp (long_options[option_index].name, "r_theta") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->r_theta_given),
                &(local_args_info.r_theta_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "r_theta", '-',
                additional_error))
              goto failure;
          
          }
          /* g(r, cos(omega)).  */
          else if (strcmp (long_options[option_index].name, "r_omega") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->r_omega_given),
                &(local_args_info.r_omega_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "r_omega", '-',
                additional_error))
              goto failure;
          
          }
          /* g(r, z).  */
          else if (strcmp (long_options[option_index].name, "r_z") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->r_z_given),
                &(local_args_info.r_z_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "r_z", '-',
                additional_error))
              goto failure;
          
          }
          /* g(cos(theta), cos(omega)).  */
          else if (strcmp (long_options[option_index].name, "theta_omega") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->theta_omega_given),
                &(local_args_info.theta_omega_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "theta_omega", '-',
                additional_error))
              goto failure;
          
          }
          /* g(r, cos(theta), cos(omega)).  */
          else if (strcmp (long_options[option_index].name, "r_theta_omega") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->r_theta_omega_given),
                &(local_args_info.r_theta_omega_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "r_theta_omega", '-',
                additional_error))
              goto failure;
          
          }
          /* g(x, y, z).  */
          else if (strcmp (long_options[option_index].name, "gxyz") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->gxyz_given),
                &(local_args_info.gxyz_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "gxyz", '-',
                additional_error))
              goto failure;
          
          }
          /* 2D g(r) (Slab width --dz must be specified).  */
          else if (strcmp (long_options[option_index].name, "twodgofr") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->twodgofr_given),
                &(local_args_info.twodgofr_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "twodgofr", '-',
                additional_error))
              goto failure;
          
          }
          /* rp2 order parameter (--sele1 and --sele2 must be specified).  */
          else if (strcmp (long_options[option_index].name, "rp2") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->rp2_given),
                &(local_args_info.rp2_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "rp2", '-',
                additional_error))
              goto failure;
          
          }
          /* slab density, rho(z).  */
          else if (strcmp (long_options[option_index].name, "slab_density") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->slab_density_given),
                &(local_args_info.slab_density_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "slab_density", '-',
                additional_error))
              goto failure;
          
          }
          /* pipe density, rho(axis1, axis2).  */
          else if (strcmp (long_options[option_index].name, "pipe_density") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->pipe_density_given),
                &(local_args_info.pipe_density_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "pipe_density", '-',
                additional_error))
              goto failure;
          
          }
          /* p(cos(theta)) (--sele1 must be specified, --sele2 is optional).  */
          else if (strcmp (long_options[option_index].name, "p_angle") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->p_angle_given),
                &(local_args_info.p_angle_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "p_angle", '-',
                additional_error))
              goto failure;
          
          }
          /* hxy.  */
          else if (strcmp (long_options[option_index].name, "hxy") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->hxy_given),
                &(local_args_info.hxy_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "hxy", '-',
                additional_error))
              goto failure;
          
          }
          /* rho(R).  */
          else if (strcmp (long_options[option_index].name, "rho_r") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->rho_r_given),
                &(local_args_info.rho_r_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "rho_r", '-',
                additional_error))
              goto failure;
          
          }
          /* angle of R.  */
          else if (strcmp (long_options[option_index].name, "angle_r") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->angle_r_given),
                &(local_args_info.angle_r_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "angle_r", '-',
                additional_error))
              goto failure;
          
          }
          /* hull volume of nanoparticle.  */
          else if (strcmp (long_options[option_index].name, "hullvol") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->hullvol_given),
                &(local_args_info.hullvol_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "hullvol", '-',
                additional_error))
              goto failure;
          
          }
          /* length of nanorod.  */
          else if (strcmp (long_options[option_index].name, "rodlength") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->rodlength_given),
                &(local_args_info.rodlength_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "rodlength", '-',
                additional_error))
              goto failure;
          
          }
          /* spatially-resolved tetrahedrality order parameter Qk(z).  */
          else if (strcmp (long_options[option_index].name, "tet_param_z") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->tet_param_z_given),
                &(local_args_info.tet_param_z_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "tet_param_z", '-',
                additional_error))
              goto failure;
          
          }
          /* computes density of the tetrahedrality order parameter Qk.  */
          else if (strcmp (long_options[option_index].name, "tet_param_dens") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->tet_param_dens_given),
                &(local_args_info.tet_param_dens_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "tet_param_dens", '-',
                additional_error))
              goto failure;
          
          }
          /* volume-resolved tetrahedrality order parameter Qk(x,y,z).  (voxelSize, rcut, and gaussWidth must be specified).  */
          else if (strcmp (long_options[option_index].name, "tet_param_xyz") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->tet_param_xyz_given),
                &(local_args_info.tet_param_xyz_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "tet_param_xyz", '-',
                additional_error))
              goto failure;
          
          }
          /* slab-resolved RNEMD statistics (temperature, density, velocity).  */
          else if (strcmp (long_options[option_index].name, "rnemdz") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->rnemdz_given),
                &(local_args_info.rnemdz_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "rnemdz", '-',
                additional_error))
              goto failure;
          
          }
          /* shell-resolved RNEMD statistics (temperature, density, angular velocity).  */
          else if (strcmp (long_options[option_index].name, "rnemdr") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->rnemdr_given),
                &(local_args_info.rnemdr_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "rnemdr", '-',
                additional_error))
              goto failure;
          
          }
          /* shell and angle-resolved RNEMD statistics (temperature, density, angular velocity).  */
          else if (strcmp (long_options[option_index].name, "rnemdrt") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->rnemdrt_given),
                &(local_args_info.rnemdrt_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "rnemdrt", '-',
                additional_error))
              goto failure;
          
          }
          /* electrostatic potential to frequency map based on the Cho nitrile fits.  */
          else if (strcmp (long_options[option_index].name, "nitrile") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->nitrile_given),
                &(local_args_info.nitrile_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "nitrile", '-',
                additional_error))
              goto failure;
          
          }
          /* X, Y, and R (surface diffusion if Z exposed and bulk immobile) diffusion.  */
          else if (strcmp (long_options[option_index].name, "surfDiffusion") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->surfDiffusion_given),
                &(local_args_info.surfDiffusion_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "surfDiffusion", '-',
                additional_error))
              goto failure;
          
          }
          /* Coordination Number Distribution.  */
          else if (strcmp (long_options[option_index].name, "cn") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->cn_given),
                &(local_args_info.cn_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "cn", '-',
                additional_error))
              goto failure;
          
          }
          /* Secondary Coordination Number Distribution.  */
          else if (strcmp (long_options[option_index].name, "scn") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->scn_given),
                &(local_args_info.scn_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "scn", '-',
                additional_error))
              goto failure;
          
          }
          /* Generalized Coordination Number Distribution.  */
          else if (strcmp (long_options[option_index].name, "gcn") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->gcn_given),
                &(local_args_info.gcn_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "gcn", '-',
                additional_error))
              goto failure;
          
          }
          /* Hydrogen Bonding statistics using geometric criteria (rcut and thetacut must be specified).  */
          else if (strcmp (long_options[option_index].name, "hbond") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->hbond_given),
                &(local_args_info.hbond_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "hbond", '-',
                additional_error))
              goto failure;
          
          }
          /* potential energy difference when charge on selection is set to zero.  */
          else if (strcmp (long_options[option_index].name, "potDiff") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->potDiff_given),
                &(local_args_info.potDiff_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "potDiff", '-',
                additional_error))
              goto failure;
          
          }
          /* hydrogen bond statistics binned by tetrahedrality of donor and acceptor molecules.  */
          else if (strcmp (long_options[option_index].name, "tet_hb") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->tet_hb_given),
                &(local_args_info.tet_hb_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "tet_hb", '-',
                additional_error))
              goto failure;
          
          }
          /* distance-dependent Kirkwood factor for quadrupoles.  */
          else if (strcmp (long_options[option_index].name, "kirkwoodQ") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->kirkwoodQ_given),
                &(local_args_info.kirkwoodQ_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "kirkwoodQ", '-',
                additional_error))
              goto failure;
          
          }
          /* computes an average density field.  */
          else if (strcmp (long_options[option_index].name, "densityfield") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->densityfield_given),
                &(local_args_info.densityfield_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "densityfield", '-',
                additional_error))
              goto failure;
          
          }
          /* computes an average velocity field.  */
          else if (strcmp (long_options[option_index].name, "velocityfield") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->velocityfield_given),
                &(local_args_info.velocityfield_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "velocityfield", '-',
                additional_error))
              goto failure;
          
          }
          /* computes an average two-dimensional velocity map.  */
          else if (strcmp (long_options[option_index].name, "velocityZ") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->velocityZ_given),
                &(local_args_info.velocityZ_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "velocityZ", '-',
                additional_error))
              goto failure;
          
          }
          /* computes the charge distribution along selected axis and selected atom.  */
          else if (strcmp (long_options[option_index].name, "chargez") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->chargez_given),
                &(local_args_info.chargez_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "chargez", '-',
                additional_error))
              goto failure;
          
          }
          /* computes the continuous charge distribution along selected axis and selected atom.  */
          else if (strcmp (long_options[option_index].name, "charge_density_z") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->charge_density_z_given),
                &(local_args_info.charge_density_z_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "charge_density_z", '-',
                additional_error))
              goto failure;
          
          }
          /* computes the number of selected atoms  along selected axis.  */
          else if (strcmp (long_options[option_index].name, "countz") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->countz_given),
                &(local_args_info.countz_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "countz", '-',
                additional_error))
              goto failure;
          
          }
          /* probability of order parameter for given selection.  */
          else if (strcmp (long_options[option_index].name, "order_prob") == 0)
          {
          
            if (args_info->staticProps_group_counter && override)
              reset_group_staticProps (args_info);
            args_info->staticProps_group_counter += 1;
          
            if (update_arg( 0 , 
                 0 , &(args_info->order_prob_given),
                &(local_args_info.order_prob_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "order_prob", '-',
                additional_error))
              goto failure;
          
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", CMDLINE_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */

  if (args_info->staticProps_group_counter > 1)
    {
      fprintf (stderr, "%s: %d options of group staticProps were given. One is required%s.\n", argv[0], args_info->staticProps_group_counter, (additional_error ? additional_error : ""));
      error_occurred = 1;
    }
  


  if (check_required)
    {
      error_occurred += cmdline_parser_required2 (args_info, argv[0], additional_error);
    }

  cmdline_parser_release (&local_args_info);

  if ( error_occurred )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;
      int found_prog_name = 0;
      /* whether program name, i.e., argv[0], is in the remaining args
         (this may happen with some implementations of getopt,
          but surely not with the one included by gengetopt) */


      args_info->inputs_num = argc - optind - found_prog_name;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind++]) ;
    }

  return 0;

failure:
  
  cmdline_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}
/* vim: set ft=c noet ts=8 sts=8 sw=8 tw=80 nojs spell : */
