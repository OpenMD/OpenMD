/** @file HydroCmd.hpp
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef HYDROCMD_H
#define HYDROCMD_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "Hydro"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "Hydro"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "2"
#endif

enum enum_model { model__NULL = -1, model_arg_AtomicBead = 0, model_arg_RoughShell, model_arg_BoundaryElement };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * input_arg;	/**< @brief input MetaData (omd) file.  */
  char * input_orig;	/**< @brief input MetaData (omd) file original value given at command line.  */
  const char *input_help; /**< @brief input MetaData (omd) file help description.  */
  char * xyz_arg;	/**< @brief xyz file for AtomicBead model.  */
  char * xyz_orig;	/**< @brief xyz file for AtomicBead model original value given at command line.  */
  const char *xyz_help; /**< @brief xyz file for AtomicBead model help description.  */
  char * stl_arg;	/**< @brief stl file for BoundaryElement model.  */
  char * stl_orig;	/**< @brief stl file for BoundaryElement model original value given at command line.  */
  const char *stl_help; /**< @brief stl file for BoundaryElement model help description.  */
  char * msms_arg;	/**< @brief filename root for MSMS .vert and .face files.  */
  char * msms_orig;	/**< @brief filename root for MSMS .vert and .face files original value given at command line.  */
  const char *msms_help; /**< @brief filename root for MSMS .vert and .face files help description.  */
  char * output_arg;	/**< @brief output file prefix.  */
  char * output_orig;	/**< @brief output file prefix original value given at command line.  */
  const char *output_help; /**< @brief output file prefix help description.  */
  enum enum_model model_arg;	/**< @brief hydrodynamics model.  */
  char * model_orig;	/**< @brief hydrodynamics model original value given at command line.  */
  const char *model_help; /**< @brief hydrodynamics model help description.  */
  double beadSize_arg;	/**< @brief bead size (diameter) for RoughShell model (in angstroms) (default='0.2').  */
  char * beadSize_orig;	/**< @brief bead size (diameter) for RoughShell model (in angstroms) original value given at command line.  */
  const char *beadSize_help; /**< @brief bead size (diameter) for RoughShell model (in angstroms) help description.  */
  int elements_flag;	/**< @brief output the hydrodynamic elements (beads or triangles) only, hydrodynamics calculation will not be performed (default=off).  */
  const char *elements_help; /**< @brief output the hydrodynamic elements (beads or triangles) only, hydrodynamics calculation will not be performed help description.  */
  double viscosity_arg;	/**< @brief viscosity (in poise) (default='0.01').  */
  char * viscosity_orig;	/**< @brief viscosity (in poise) original value given at command line.  */
  const char *viscosity_help; /**< @brief viscosity (in poise) help description.  */
  double temperature_arg;	/**< @brief temperature (in Kelvin (default='300').  */
  char * temperature_orig;	/**< @brief temperature (in Kelvin original value given at command line.  */
  const char *temperature_help; /**< @brief temperature (in Kelvin help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int xyz_given ;	/**< @brief Whether xyz was given.  */
  unsigned int stl_given ;	/**< @brief Whether stl was given.  */
  unsigned int msms_given ;	/**< @brief Whether msms was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int model_given ;	/**< @brief Whether model was given.  */
  unsigned int beadSize_given ;	/**< @brief Whether beadSize was given.  */
  unsigned int elements_given ;	/**< @brief Whether elements was given.  */
  unsigned int viscosity_given ;	/**< @brief Whether viscosity was given.  */
  unsigned int temperature_given ;	/**< @brief Whether temperature was given.  */

  char **inputs ; /**< @brief unnamed options (options without names) */
  unsigned inputs_num ; /**< @brief unnamed options number */
  int input_file_group_counter; /**< @brief Counter for group input_file */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_model_values[];  /**< @brief Possible values for model. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* HYDROCMD_H */
