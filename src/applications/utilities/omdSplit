#!@Python3_EXECUTABLE@
"""OpenMD File Splitter

Splits OpenMD dump file frames into seperate omd files

Usage: omdSplit

Options:
  -h, --help              show this help
  -m, --meta-data=...     use specified OpenMD (.omd) file
  -s, --split-frame=...   split every n frames


Example:
   omdSplit -m Ar.dump

"""

__author__ = "Charles Vardeman (cvardema@nd.edu)"
__copyright__ = "Copyright (c) 2004-2022 The University of Notre Dame. All Rights Reserved."
__license__ = "OpenMD"

import sys
import getopt
import string
import os


_haveMDFileName = 0
_haveSplitFrame = 0


def usage():
    print(__doc__)


def splitFile(mdFileName, skipFrameNumber):
    mdFile = open(mdFileName, 'r')

    (filepath, filename) = os.path.split(mdFileName)
   
    (outfilePrefix, ext)  = os.path.splitext(filename)

    
    
    metaDataFrame = []
    haveMetaData = 0
    haveMetaDataEnd = 0
# Find OpenMD version info first
    line = mdFile.readline()
    while True:
        if '<OOPSE version=' in line or '<OpenMD version=' in line:
            OpenMDversion = line
            break
        line = mdFile.readline()

# Rewind file and find start of MetaData block

    mdFile.seek(0)
    breakLoop = False
    line = mdFile.readline()

    while True:
        if '<MetaData>' in line:
            while 2:
                metaDataFrame.append(line)
                line = mdFile.readline()
                if '</MetaData>' in line:
                    metaDataFrame.append(line)
                    breakLoop = True
                    break
        if breakLoop:
            break
        line = mdFile.readline()


    mdFile.seek(0)
    framePos = 0
    foundFrames = 0;
    line = mdFile.readline()
    while True:
        if '<Snapshot>' in line:
            foundFrames += 1
            division, remainder=divmod(foundFrames, int(skipFrameNumber))
            if (remainder == 0):
                outfilename = outfilePrefix + "_" + "%04d" % foundFrames + ext
                outFile = open(outfilename, 'w')
                outFile.write(OpenMDversion)
                for metaline in metaDataFrame:
                    outFile.write(metaline)
                while not '</Snapshot>' in line:
                    outFile.write(line)
                    line = mdFile.readline()
                outFile.write(line)
                outFile.write("</OpenMD>")
                outFile.close()
        line = mdFile.readline()
        if not line: break
    
    mdFile.close()


def main(argv):                         
    try:                                
        opts, args = getopt.getopt(argv, "hm:s:", ["help", "meta-data=", "split-frame", ""]) 
    except getopt.GetoptError:           
        usage()                          
        sys.exit(2)                     
    for opt, arg in opts:                
        if opt in ("-h", "--help"):      
            usage()                     
            sys.exit()                  
        elif opt in ("-m", "--meta-data"): 
            mdFileName = arg
            global _haveMDFileName
            _haveMDFileName = 1
        elif opt in ("-s", "--split-frame"): 
            skipFrameNumber = arg
            global _haveSplitFrame
            _haveSplitFrame = 1
    if (_haveMDFileName != 1):
        usage() 
        print("No OpenMD file was specified")
        sys.exit()
    if (_haveSplitFrame != 1):
        usage() 
        print("Frames to split was not specified")
        sys.exit()
    splitFile(mdFileName, skipFrameNumber);

if __name__ == "__main__":
    if len(sys.argv) == 1:
        usage()
        sys.exit()
    main(sys.argv[1:])

