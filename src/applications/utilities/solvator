#!@Python3_EXECUTABLE@

# program that reads in a water box and solute xyz (or pdb), merges
# the two systems, and deletes overlapping molecules

__author__ = "Chris Fennell and Dan Gezelter"
__copyright__ = "Copyright (c) 2004-present The University of Notre Dame. All Rights Reserved."
__license__ = "OpenMD"

import argparse
import sys
import math

d2tolerance = 7.5625  # distance to start cutting
fileName = 'solvatedSystem.omd'
startSnap = 0
startFrame = 0
startStunts = 0
startMeta = 0
soluteName = 'SOLUTE'
nSolvent = 0

# Argument parser setup
parser = argparse.ArgumentParser(description='Carves a solute void in an OpenMD water box', 
                                    formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog=
'''
Example:
       solvator -i myWater.omd -p mySolute.pdb -o mySystem.omd
''')
parser.add_argument('-f', '--flexible=', type=bool, dest='f',
                        action=argparse.BooleanOptionalAction, default=False,
                        help='include a flexible solute model description in the output file rather than the rigid body solute model description')
parser.add_argument('-d', action='store', dest='d',
                        type=float, default=2.75, required=False,
                        help='Overlap removal distance (in angstroms)')
parser.add_argument('-i', type=str, required=True, action='store', dest='i',
                        help='Solvent input file (OpenMD .omd file)')
parser.add_argument('-n', type=str, help='Name for the solute',
                        required=False, dest='n', action='store',
                        default='SOLUTE')
parser.add_argument('-o', '--output=', action='store', dest='o',
                        required=False, default='solvatedSystem.omd',
                        help='Carved solvent output file (OpenMD .omd format)')
parser.add_argument('-p', type=str, help='Solute input file (pdb)',
                        action='store', dest='p')
parser.add_argument('-x', type=str, help='Solute input file (xyz)',
                        action='store', dest='x')
args = parser.parse_args()

# Set variables from arguments
if args.i:
    solventName = args.i
else:
    sys.exit("Error: No solvent box specified\nPlease select a solvent box using the -i flag")

soluteFileName = args.p if args.p else args.x
fileName = args.o if args.o else fileName
soluteName = args.n if args.n else soluteName

if not (args.p or args.x):
    sys.exit("Error: No solute file specified\nPlease select a solute file with the -p or -x flags (pdb or xyz respectively)")

if args.d:
    dval = args.d
    d2tolerance = dval * dval
else:
    d2tolerance = 7.5625

# Open files
try:
    with open(soluteFileName, 'r') as solute_file:
        solute_data = solute_file.readlines()
except FileNotFoundError:
    sys.exit(f"Error: Can't open file {soluteFileName}")

solute_names, solute_x, solute_y, solute_z = [], [], [], []

if args.x:
    headerLines = 2
    for line in solute_data:
        if headerLines > 0:
            headerLines -= 1
        else:
            parts = line.split()
            solute_names.append(parts[0])
            solute_x.append(float(parts[1]))
            solute_y.append(float(parts[2]))
            solute_z.append(float(parts[3]))

if args.p:
    for line in solute_data:
        parts = line.split()
        if parts[0] == 'ATOM' or parts[0] == 'HETATM':
            solute_names.append(parts[2])
            solute_x.append(float(parts[5]))
            solute_y.append(float(parts[6]))
            solute_z.append(float(parts[7]))

# Remap solute to the center of the box
xSol = sum(solute_x) / len(solute_x)
ySol = sum(solute_y) / len(solute_y)
zSol = sum(solute_z) / len(solute_z)

solute_x = [x - xSol for x in solute_x]
solute_y = [y - ySol for y in solute_y]
solute_z = [z - zSol for z in solute_z]

soluteCount = len(solute_x) if args.f else 1
solventCount = soluteCount

# Process solvent file and write output
try:
    with open(solventName, 'r') as solvent_file, open(fileName, 'w') as out_file:
        startSnap = startFrame = startStunts = startMeta = 0
        frameData, metaLines, goodSolventMolecules = [], [], []

        for line in solvent_file:
            if "</Snapshot" in line:
                startSnap = 0
            if "</FrameData" in line:
                startFrame = 0
            if "</StuntDoubles" in line:
                startStunts = 0
            if "</MetaData" in line:
                startMeta = 0
            if "</OpenMD" in line:
                break

            if startMeta == 1:
                metaLines.append(line)

            if startSnap == 1:
                if startFrame == 1:
                    frameData.append(line)
                if "Hmat" in line:
                    parts = line.split()
                    hxx, hyy, hzz = float(parts[2][:-1]), float(parts[8][:-1]), float(parts[14])
                if startStunts == 1:
                    parts = line.split()
                    x_val = float(parts[2]) - (hxx * round(float(parts[2]) / hxx))
                    y_val = float(parts[3]) - (hyy * round(float(parts[3]) / hyy))
                    z_val = float(parts[4]) - (hzz * round(float(parts[4]) / hzz))

                    saveFlag = True
                    for i in range(len(solute_x)):
                        diff_x = x_val - solute_x[i]
                        diff_y = y_val - solute_y[i]
                        diff_z = z_val - solute_z[i]
                        dist2 = diff_x * diff_x + diff_y * diff_y + diff_z * diff_z
                        if dist2 < d2tolerance:
                            saveFlag = False
                            break

                    if saveFlag:
                        saveLine = f"{solventCount}\t{parts[1]}\t{parts[2]}"
                        saveLine += ''.join([f" {p}" for p in parts[3:]])
                        goodSolventMolecules.append(saveLine)
                        solventCount += 1

            if "<Snapshot" in line:
                startSnap = 1
            if "<FrameData" in line:
                startFrame = 1
            if "<StuntDoubles" in line:
                startStunts = 1
            if "<MetaData" in line:
                startMeta = 1

        nSolvent = len(goodSolventMolecules)

        # Write output file
        out_file.write("<OpenMD version=2>\n")
        out_file.write("  <MetaData>\n")
        out_file.write("\nmolecule{{\n  name = \"{}\";\n\n".format(soluteName))

        if args.f:
            for i in range(len(solute_x)):
                out_file.write(f"  atom[{i}]{{\n    type = \"{solute_names[i]}\";\n  }}\n")
            out_file.write("}\n")
        else:
            for i in range(len(solute_x)):
                out_file.write(f"  atom[{i}]{{\n    type = \"{solute_names[i]}\";\n")
                out_file.write(f"    position({solute_x[i]}, {solute_y[i]}, {solute_z[i]});\n  }}\n")
            out_file.write("\n  rigidBody[0]{\n    members(")
            out_file.write(", ".join(str(i) for i in range(len(solute_x))))
            out_file.write(");\n  }\n}\n")

        out_file.write(f"\ncomponent{{\n  type = \"{soluteName}\";\n  nMol = 1;\n}}\n")
        for line in metaLines:
            if "nMol" in line:
                out_file.write(f"  nMol = {nSolvent};\n")
            else:
                out_file.write(line)

        out_file.write("  </MetaData>\n")
        out_file.write("  <Snapshot>\n")
        out_file.write("    <FrameData>\n")

        for line in frameData:
            out_file.write(line)

        out_file.write("    </FrameData>\n")
        out_file.write("    <StuntDoubles>\n")

        if args.f:
            for i in range(len(solute_x)):
                out_file.write(f"{i}\tp\t{solute_x[i]} {solute_y[i]} {solute_z[i]}\n")
        else:
            out_file.write("0\tpq\t0.0 0.0 0.0 1.0 0.0 0.0 0.0\n")

        for molecule in goodSolventMolecules:
            out_file.write(f"{molecule}\n")

        out_file.write("    </StuntDoubles>\n")
        out_file.write("  </Snapshot>\n")
        out_file.write("</OpenMD>\n")

    print(f"The solvated system \"{fileName}\" was generated.")

except FileNotFoundError:
    sys.exit(f"Error: Can't open file {solventName}")
