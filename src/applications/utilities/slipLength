#!@Python3_EXECUTABLE@

__author__ = "Patrick Louden (plouden@nd.edu)"
__copyright__ = "Copyright (c) 2004-present The University of Notre Dame. All Rights Reserved."
__license__ = "OpenMD"

import sys
import os
import datetime
import argparse
import textwrap
import numpy as np
import math
from scipy.optimize import curve_fit
from argparse import RawDescriptionHelpFormatter
from scipy import stats



def usage():
    print(__doc__)



# Fit function we are optimizing data to
def func(x, Vs, Z1, Z2, ml, w, Vl):
    ''' from Mathematica CForm
    0.5*(Vl + ml*(x - Z1))*(1 - Tanh((x - Z1)/w)) + 
    0.5*Vs*(Tanh((x - Z1)/w) - Tanh((x - Z2)/w)) + 
    0.5*(Vl - ml*(x - Z2))*(1 + Tanh((x - Z2)/w))
    '''
    
    return ( 0.5*(Vl+ml*(x-Z1))*(1.0-np.tanh((x-Z1)/w))+0.5*Vs*(np.tanh((x-Z1)/w)-np.tanh((x-Z2)/w))+0.5*(Vl-ml*(x-Z2))*(1.0+np.tanh((x-Z2)/w)) )






#This function reads in the .rnemd file and extracts the actual momentum flux, as well as the zPositions and the average velocities therein.
def rnemdExtractor(rnemdFileName):
    if os.path.exists(rnemdFileName):
        rnemdFile = open(rnemdFileName, 'r')
    else:
        print('Error: cannot open ' + rnemdFileName)
        sys.exit(2)

    rnemdZPos = np.array([])
    rnemdV = np.array([]).reshape(0, 3)

    while True:
        line = rnemdFile.readline()
        if not line: break
        if "Actual flux:" in line or "actual flux:" in line:
            rnemdFile.readline()
            line = rnemdFile.readline()
            rnemdJzP = np.array([[float(line.split()[4][:-1])], [float(line.split()[5][:-1])], [float(line.split()[6])]])
        elif "#" not in line:
            if len(line.split()) > 6:
                print("Error in the .rnemd file, found more than 6 expected columns.")
            else:
                rnemdZPos = np.append(rnemdZPos, np.array([float(line.split()[0])]))
                rnemdV = np.vstack( [rnemdV, [ float(line.split()[2]), float(line.split()[3]), float(line.split()[4]) ] ] )

    #Now let's determine what kind of shearing simulation was performed 
    # ie, JzPx, JzPy, or JzPxy                                                                                                          
    if (rnemdJzP[2] != 0.0):
        print("Error: JzPz Actual Exchange total was found to be >0.0 in (.rnemd) file.")
        sys.exit(2)
    if (rnemdJzP[0] == 0.0 and rnemdJzP[1] == 0.0):
        print("Error: both JzPx and JzPy Actual Exchange totals were found to be 0.0 in (.rnemd) file. ")
        sys.exit(2)
    elif (rnemdJzP[0] != 0.0 and rnemdJzP[1] != 0.0):
        print("Error: both JzPx and JzPy Actual Exchange totals were found to be >0.0 in (.rnemd) file.\n This script only calculates friction coefficients for single dimensional momentum fluxes.")
        sys.exit(2)

        #After sanity checking, we now set a variable jzType to store if the imposed momentum flux is in the x- (0) or y-direction (1).                       
        #jzType will be used when we iterate through rnemdV                   
        #jzType = 0 -> flux was in x-dimension                                
        #jzType = 1 -> flux was in y-dimension                                    
    elif (rnemdJzP[0] == 0.0 or rnemdJzP[1] == 0.0):
        if np.abs(rnemdJzP[0]) > np.abs(rnemdJzP [1]):
            jzType = 0
        else:
            jzType = 1

    print("Read in " + str(rnemdFileName))
    return (rnemdJzP, jzType, rnemdZPos, rnemdV)








def velFitter(rnemdJzP, jzType, rnemdZPos, rnemdV, Vs, Z1, Z2, m, w, Vl, numDel, outputFileName):    
    rnemdVx = np.array([]).reshape(0, 1)
    rnemdVy = np.array([]).reshape(0, 1)
    
    for i in range(0, len(rnemdV)):
        rnemdVx = np.append(rnemdVx, rnemdV[i][0]) 
        rnemdVy = np.append(rnemdVy, rnemdV[i][1])

    #Remove data points from the start and last end of the vector of  values of rnemdVx and rnemdVy to smooth fits
    for i in range(0, numDel):
        rnemdVx = np.delete(rnemdVx, 0)
        rnemdVy = np.delete(rnemdVy, 0)
        rnemdZPos = np.delete(rnemdZPos, 0)
    for i in range(0, numDel+1):
        rnemdVx = np.delete(rnemdVx, len(rnemdVx)-1)
        rnemdVy = np.delete(rnemdVy, len(rnemdVy)-1)
        rnemdZPos = np.delete(rnemdZPos, len(rnemdZPos)-1)


    #curve_fit(function to fit to, x-data, y-data, [initial guess of param 1, initial guess of param 2,...] 
    if (jzType == 0):
        popt, pcov = curve_fit(func, rnemdZPos, rnemdVx, [Vs, Z1, Z2, m, w, Vl], ftol=0.01)
    elif (jzType == 1):
         popt, pcov = curve_fit(func, rnemdZPos, rnemdVy, [Vs, Z1, Z2, m, w, Vl], ftol=0.01)
    

    #write out the raw data and the fit for visual inspection of quality of fit
    print("Writing out fit file")
    fitFileName = outputFileName + "FIT"
    fitFile = open(fitFileName, "w")
    fitFile.write("# zPosition     <V_{i}>     fit value" + "\n")
    for i in range(0, len(rnemdZPos)):
          y = func(rnemdZPos[i], popt[0], popt[1], popt[2], popt[3], popt[4], popt[5])
          if (jzType == 0):
             fitFile.write(str(rnemdZPos[i]) + "\t" +  str(rnemdVx[i]) + "\t" + str(y) + "\n")
          elif (jzType == 1):
             fitFile.write(str(rnemdZPos[i]) + "\t" +  str(rnemdVy[i]) + "\t" + str(y) + "\n") 


    #print "popt = ", popt
    return (popt, pcov)







def calcShearRate(jzType, rnemdZPos, rnemdV):
    # jzType = 0 -> flux was in x-dimension                                   
    # jzType = 1 -> flux was in y-dimension
    
    velLiq = (rnemdV[0][jzType] + rnemdV[len(rnemdV)-1][jzType])/2.0

    if (len(rnemdV) % 2) == 0 :
        velSol = ( rnemdV[(len(rnemdV) / 2)-1][jzType] + rnemdV[(len(rnemdV)/ 2)][jzType]) / 2.0
    elif (len(rnemdV) % 2) != 0:
        velSol = ( rnemdV[(len(rnemdV) + 1)/2][jzType] + rnemdV[((len(rnemdV)+1)/2)+1][jzType]) / 2.0        

    shearRate = velSol - velLiq
    
    return (shearRate)






def lambdaCalc(rnemdJzP, jzType, popt):
    print("Performing lambda calculation")
    #popt = Vs, Z1, Z2, ml, w, Vl    

    zLiq = (popt[0] - popt[5]) / popt[3] + popt[1]
    zSol = popt[1] + 0.5*popt[4]
    delta = zLiq - zSol

    if (jzType == 0):
        lambda1 = rnemdJzP[0] / (delta * popt[3])
    elif (jzType == 1):
        lambda1 = rnemdJzP[1] / (delta * popt[3])
    

    return (zLiq, zSol, delta, lambda1)






    




def writeOutputFile(outputFileName, rnemdFileName, popt):
       outFile = open(outputFileName, "w")
       
       outFile.write("##################################################### \n")
       outFile.write("## This output file was generated by slipLength on " + str(datetime.datetime.now()) + " ## \n#\n")
       outFile.write("#   The velocity profile found in " + str(rnemdFileName) + " was fit by \n")
       outFile.write("#   \ty = (Vl + ml(x-Z1))*(0.5(1-tanh((x-Z1)/w))) + Vs*0.5(tanh((x-Z1)/2)-tanh((x-Z2)/w)) + (Vl-ml(x-Z2))*(0.5(1+tanh((x-Z2/w)))) \n")
       outFile.write("#   where (Vs, Vl, Z1, Z2, ml, w) are fit parameters, and here y = V(i) and x = z  \n")
       outFile.write("#   Vs = velocity of the solid\n#   Vl = velocity of the liquid at the interface \n")
       outFile.write("#   Z1 = z-position of the lower interface \n#   Z2 = z-position of the upper interface \n")
       outFile.write("#   ml = slope of the velocity profile in the lower liquid region of the box \n")
       
       outFile.write("#   w = width of the interface \n#\n")
       outFile.write("# Obtained optomized parameters \n")
       outFile.write("# \t Vs = " + str(popt[0]) + "\n")
       outFile.write("# \t Vl = " + str(popt[5]) + "\n")
       outFile.write("# \t Z1 = " + str(popt[1]) + "\n")
       outFile.write("# \t Z2 = " + str(popt[2]) + "\n")
       outFile.write("# \t ml = " + str(popt[3]) + "\n")
       outFile.write("# \t w = " + str(popt[4]) + "\n#\n")

       if (float(popt[0]) < float(popt[5])):
           print("Bad fit detected, Vs < Vl")
           outFile.write("# WARNING Vs < Vl \n#\n")





def writeOutputLambda(outputFileName, rnemdJzP, jzType, zLiq, zSol, delta, lambda1, shearRate):
    outFile = open(outputFileName, "a")
    outFile.write("#   The interfacial slip length, \lambda, was calculated by \n")
    outFile.write("#   \tlambda = Jz(p) / (dV/dz)_{liquid} / delta \n")
    outFile.write("#   where Jz(p) is the imposed momentum flux, (dV/dz)_{liquid} is the slope of the velocity profile in the liquid \n")
    outFile.write("#   portion of the simulation box, and delta is the slip length determined by projecting the velocity profile of \n")
    outFile.write("#   liquid into the solid. \n#\n")
    outFile.write("# zLiq = " + str(zLiq) + "\n")
    outFile.write("# zSol = " + str(zSol) + "\n")
    outFile.write("# \delta (angstroms) = " + str(delta) + "\n")
    if (jzType == 0):
        outFile.write("# Jz(px) = " + str((float(rnemdJzP[0]))) + "\n#\n")
    elif (jzType == 1):
        outFile.write("# Jz(py) = " + str((float(rnemdJzP[1]))) + "\n#\n")
    outFile.write("# shear rate (angstroms / fs) = " + str((float(shearRate))) + "\n" ) 
    outFile.write("# \lambda (amu/fs/angstrom/angstrom) = " + str((float(lambda1))) + "\n")
    
    if (lambda1 < 0.0):
        outFile.write("# WARNING NEGATIVE LAMBDA VALUE FOUND \n#\n#\n")




    
    






def main(argv):
    parser = argparse.ArgumentParser(
        description='OpenMD solid/liquid slip length and slip-boundary friction coefficient calculator for orthorhombic systems.',
        #formatter_class=RawDescriptionHelpFormatter,
        epilog="Example: slipLength -i shearSim.rnemd -o shearSim.vfit -z1 30.4 -z2 75.6 -w 4.5 -Vs 1.2e-5 -Vl 1.0e-6 -m 2.2e-6 -d 2")
    parser.add_argument("-i", "--rnemd-file=", action="store", dest="rnemdFileName", help="use specified input (.rnemd) file")
    parser.add_argument("-o", "--vfit-file=", action="store", dest="vfitFileName", help="use specified output (.vfit) file")
    parser.add_argument("-z1", "--lowerGibbsZ=", action="store", type=float, dest="z1", help="the location of the lower Gibbs dividing surface")
    parser.add_argument("-z2", "--upperGibbsZ=", action="store", type=float, dest="z2", help="the location of the upper Gibbs dividing surface")
    parser.add_argument("-l", "--lowerZVal=", action="store", nargs='?', type=float, dest="l", help="the initial estimate of the lower interface location (default=z1)")
    parser.add_argument("-u", "--upperZVal=", action="store", nargs='?', type=float, dest="u", help="the initial estimate of the upper interface location (default=z2)")
    parser.add_argument("-w", "--intWidth=", action="store", type=float, dest="w", help="the width of the interface") 	  
    parser.add_argument("-Vs", "--solidVel=", action="store", type=float, dest="Vs", help="the initial estimate of the velocity of the solid")
    parser.add_argument("-Vl", "--liquidVel=", action="store", type=float, dest="Vl", help="the initial estimate of the velocity of the liquid")
    parser.add_argument("-m", "--liquidSlope=", action="store", type=float, dest="m", help="the initial estimate of the slope in the liquid")
    parser.add_argument("-d", "--toDelete=", action="store", default=0, type=int, dest="toDel", help="the number of data points to be deleted from the beginning and end of the velocity profile. (default=0)")
    
    

    
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(2)
    args = parser.parse_args()

    if (not args.rnemdFileName):
        parser.print_help()
        parser.error("No input-file was specified")

    if (not args.vfitFileName):
        parser.print_help()
        parser.error("No output-file was specified")

    if (not args.z1):
        parser.print_help()
        parser.error("No lower Gibbs dividing surface specified")

    if (not args.z2):
        parser.print_help()
        parser.error("No upper Gibbs dividing surface specified")

    if (not args.l):
        args.l = args.z1
    
    if (not args.u):
        args.u = args.z2

    if (not args.w):
        parser.print_help()
        parser.error("No width of interface specified") 

    if (not args.Vs):
        parser.print_help()
        parser.error("No initial estimate of the solid velocity specified")
    
    if (not args.Vl):
        parser.print_help()
        parser.error("No initial estimate of the liquid velocity specified")
        
    if (not args.m):
        parser.print_help()
        parser.error("No initial estimate of the slope in the liquid velocity profile specified")






    #Call functions here, pass appropriate variables.


    (rnemdJzP, jzType, rnemdZPos, rnemdV) = rnemdExtractor(args.rnemdFileName)
    (popt, pcov) = velFitter(rnemdJzP, jzType, rnemdZPos, rnemdV, args.Vs, args.l, args.u, args.m, args.w, args.Vl, args.toDel, args.vfitFileName)
    
    

    (shearRate) = calcShearRate(jzType, rnemdZPos, rnemdV)
    (zLiq, zSol, delta, lambda1) = lambdaCalc(rnemdJzP, jzType, popt)


    
    writeOutputFile(args.vfitFileName, args.rnemdFileName, popt)
    writeOutputLambda(args.vfitFileName, rnemdJzP, jzType, zLiq, zSol, delta, lambda1, shearRate)
    

    print("Summary of calculation")
    if (jzType == 0):
        print("Jz(p) = ", float(rnemdJzP[0]))
    elif (jzType == 1):
        print("Jz(p) = ", float(rnemdJzP[1]))

    print("Shear rate (angstroms / fs) = ", float(shearRate))
    print("Slip length \delta (angstroms) =  ", float(delta))
    print("Friction coefficient \lambda (amu / fs / angstroms^2) = ", float(lambda1))


if __name__ == "__main__":
    main(sys.argv[1:])
