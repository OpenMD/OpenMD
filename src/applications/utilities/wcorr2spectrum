#!@Python3_EXECUTABLE@
"""A script that processes a charge velocity autocorrelation function into a
amplitude spectrum

Post-processes a wcorr file and creates a normalized spectrum.

Usage: wcorr2spectrum

Options:
  -h, --help              show this help
  -f, --wcorr-file=...    use specified vcorr file
  -o, --output-file=...   use specified output (.pspect) file
  -n, --normalize         normalize the power spectrum

Example:
   wcorr2spectrum -f Pt_nanoparticle.wcorr -o Pt_nanoparticle.pspect

"""

__author__ = "Dan Gezelter (gezelter@nd.edu), Hemanta Bhattarai (hbhattar@nd.edu)"
__copyright__ = "Copyright (c) 2004-2022 The University of Notre Dame. All Rights Reserved."
__license__ = "OpenMD"

import sys
import getopt
import string
import math
import numpy as np

def usage():
    print(__doc__)

def readWcorrFile(wcorrFileName):
    global time
    global wcorr
    time = []
    wcorr = []


    wcorrFile = open(wcorrFileName, 'r')
    line = wcorrFile.readline()

    print("reading File")
    line = wcorrFile.readline()
    while True:

        if not line.startswith("#"):
            L = line.split()

            time.append(float(L[0]))
            wcorr.append(float(L[1]))

        line = wcorrFile.readline()
        if not line: break

    wcorrFile.close()

def computeSpectrum(outFileName, normalize):
    global tnew
    global vnew
    tnew = []
    vnew = []
    # the speed of light in cm / fs
    c = 2.99792458e-5


    # symmetrize arrays

    tlen = len(time)
    for i in range(1, len(time)):
        tnew.append( -time[tlen-i] )
        vnew.append( wcorr[tlen-i] )
    for i in range(len(time)):
        tnew.append( time[i] )
        vnew.append( wcorr[i] )

    spect = np.fft.fft( vnew )
    n = len(vnew)
    timestep = tnew[1] - tnew[0]
    freq = np.fft.fftfreq(n, d=timestep)

    # freq = np.fft.fftshift(freq)
    # y = np.fft.fftshift(spect)

    outFile = open(outFileName, 'w')

    freqScale = 1.0 / c
    dfreq = (freq[1]-freq[0]) * freqScale
    s = 0.0



    for i in range(int(n/2)):
        s = s + np.abs(spect[i])*dfreq

    
    outFile.write('#frequency\tspectrum\n')
    for i in range(int(n/2)):
        s = s + np.abs(spect[i])*dfreq

    for i in range(int(n/2)):
        if normalize:
            outFile.write("%lf\t%lf\n" % (freq[i] * freqScale, np.abs(spect[i])/s))
        else:
            outFile.write("%lf\t%lf\n" % (freq[i] * freqScale, np.abs(spect[i])))
    outFile.close()

def main(argv):
    global haveWcorrFileName
    global haveOutputFileName

    haveWcorrFileName = False
    haveOutputFileName = False
    haveQValue = False
    normalize = False

    try:
        opts, args = getopt.getopt(argv, "hnf:o:", ["help", "normalize", "wcorr-file=", "output-file="])
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-f", "--wcorr-file"):
            wcorrFileName = arg
            haveWcorrFileName = True
        elif opt in ("-o", "--output-file"):
            outputFileName = arg
            haveOutputFileName = True
        elif opt in ("-n", "--normalize"):
             normalize = True
    if (not haveWcorrFileName):
        usage()
        print("No wcorr file was specified")
        sys.exit()
    if (not haveOutputFileName):
        usage()
        print("No output file was specified")
        sys.exit()


    readWcorrFile(wcorrFileName)
    computeSpectrum(outputFileName, normalize)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        usage()
        sys.exit()
    main(sys.argv[1:])
