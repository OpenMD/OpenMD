/*
 * Copyright (c) 2004-2021 The University of Notre Dame. All Rights Reserved.
 *
 * The University of Notre Dame grants you ("Licensee") a
 * non-exclusive, royalty free, license to use, modify and
 * redistribute this software in source and binary code form, provided
 * that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 * This software is provided "AS IS," without a warranty of any
 * kind. All express or implied conditions, representations and
 * warranties, including any implied warranty of merchantability,
 * fitness for a particular purpose or non-infringement, are hereby
 * excluded.  The University of Notre Dame and its licensors shall not
 * be liable for any damages suffered by licensee as a result of
 * using, modifying or distributing the software or its
 * derivatives. In no event will the University of Notre Dame or its
 * licensors be liable for any lost revenue, profit or data, or for
 * direct, indirect, special, consequential, incidental or punitive
 * damages, however caused and regardless of the theory of liability,
 * arising out of the use of or inability to use software, even if the
 * University of Notre Dame has been advised of the possibility of
 * such damages.
 *
 * SUPPORT OPEN SCIENCE!  If you use OpenMD or its source code in your
 * research, please cite the appropriate papers when you publish your
 * work.  Good starting points are:
 *
 * [1] Meineke, et al., J. Comp. Chem. 26, 252-271 (2005).
 * [2] Fennell & Gezelter, J. Chem. Phys. 124, 234104 (2006).
 * [3] Sun, Lin & Gezelter, J. Chem. Phys. 128, 234107 (2008).
 * [4] Vardeman, Stocker & Gezelter, J. Chem. Theory Comput. 7, 834 (2011).
 * [5] Kuang & Gezelter, Mol. Phys., 110, 691-701 (2012).
 * [6] Lamichhane, Gezelter & Newman, J. Chem. Phys. 141, 134109 (2014).
 * [7] Lamichhane, Newman & Gezelter, J. Chem. Phys. 141, 134110 (2014).
 * [8] Bhattarai, Newman & Gezelter, Phys. Rev. B 99, 094106 (2019).
 */
#include "hydrodynamics/AnalyticalModel.hpp"
#include "hydrodynamics/CompositeShape.hpp"
#include "hydrodynamics/Ellipsoid.hpp"
#include "hydrodynamics/Sphere.hpp"
#include "utils/simError.h"

namespace OpenMD {

  HydroProp* AnalyticalModel::calcHydroProps(RealType viscosity) {
    HydroProp* hp;
    Sphere* sphere = dynamic_cast<Sphere*>(shape_);
    if (sphere != NULL) {
      hp = sphere->getHydroProp(viscosity);
      return hp;
    } else {
      Ellipsoid* ellipsoid = dynamic_cast<Ellipsoid*>(shape_);
      if (ellipsoid != NULL) {
        hp = ellipsoid->getHydroProp(viscosity);
        return hp;
      } else {
        CompositeShape* composite = dynamic_cast<CompositeShape*>(shape_);
        if (composite != NULL) {
          // props = composite->getHydroProp(viscosity);
          // return true;
          return NULL;
        } else {
          snprintf(painCave.errMsg, MAX_SIM_ERROR_MSG_LENGTH,
                  "Could not figure out what kind of shape this is!\n");
          painCave.severity = OPENMD_ERROR;
          painCave.isFatal  = 1;
          simError();
          return NULL;
        }
      }
    }
  }

  void AnalyticalModel::writeElements(std::ostream& os) {
    os << "1\n";
    os << "Generated by Hydro\n";    
    Vector3d pos = shape_->getOrigin();
    os << shape_->getName() << "\t" << pos[0] << "\t" << pos[1] << "\t" << pos[2]
       << std::endl;
  }
}  // namespace OpenMD
